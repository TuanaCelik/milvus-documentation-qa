{"content": "<iframe src=\"https://www.googletagmanager.com/ns.html?id=G-V1G3KQ048M\" height=\"0\" width=\"0\" style=\"display: none; visibility: hidden\" aria-hidden=\"true\"></iframe>DocsTutorialsToolsBlogCommunityTry Managed Milvus FREEDocsTutorialsToolsBlogCommunityStars22kJoin SlackTry Managed Milvus FREEHow we use cookiesThis website stores cookies on your computer. By continuing to browse or by clicking \u2018Accept\u2019, you agree to the storing of cookies on your device to enhance your site experience and for analytical purposes.AcceptSearch\u2318KHomev2.2.x\u200bAbout MilvusGet StartedUser GuideManage Milvus ConnectionsManage DatabasesManage CollectionsManage PartitionsManage DataManage IndexesBuild an Index on VectorsBuild an Index on ScalarsDrop an IndexSearch and QuerySearch with Time TravelBootcampAdministration GuideIntegrationsBenchmarksToolsReferenceExample ApplicationsFAQsAPI referenceBuild an Index on Vectors\nThis guide describes how to build an index on vectors in Milvus.\nVector indexes are an organizational unit of metadata used to accelerate vector similarity search. Without the index built on vectors, Milvus will perform a brute-force search by default.\nSee Vector Index for more information about the mechanism and varieties of vector indexes.\n\nBy default, Milvus does not index a segment with less than 1,024 rows. To change this parameter, configure rootCoord.minSegmentSizeToEnableIndex in milvus.yaml.\n\nThe following example builds a 1024-cluster IVF_FLAT index with Euclidean distance (L2) as the similarity metric. You can choose the index and metrics that suit your scenario. See Similarity Metrics for more information.\nPrepare index parameter\nPrepare the index parameters as follows:\n\n  Python \n  Java\n  GO\n  Node.js\n\nindex_params = {\n  \"metric_type\":\"L2\",\n  \"index_type\":\"IVF_FLAT\",\n  \"params\":{\"nlist\":1024}\n}\n\nconst index_params = {\n  metric_type: \"L2\",\n  index_type: \"IVF_FLAT\",\n  params: JSON.stringify({ nlist: 1024 }),\n};\n\nidx, err := entity.NewIndexIvfFlat(   // NewIndex func\n    entity.L2,                        // metricType\n    1024,                             // ConstructParams\n)\nif err != nil {\n  log.Fatal(\"fail to create ivf flat index parameter:\", err.Error())\n}\n\nfinal IndexType INDEX_TYPE = IndexType.IVF_FLAT;   // IndexType\nfinal String INDEX_PARAM = \"{\\\"nlist\\\":1024}\";     // ExtraParam\n\n\ncreate index\n\nCollection name (book): book\n\nThe name of the field to create an index for (book_intro): book_intro\n\nIndex type (FLAT, IVF_FLAT, IVF_SQ8, IVF_PQ, RNSG, HNSW, ANNOY): IVF_FLAT\n\nIndex metric type (L2, IP, HAMMING, TANIMOTO): L2\n\nIndex params nlist: 1024\n\nTimeout []:\n\ncurl -X 'POST' \\\n  'http://localhost:9091/api/v1/index' \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"collection_name\": \"book\",\n    \"field_name\": \"book_intro\",\n    \"extra_params\":[\n      {\"key\": \"metric_type\", \"value\": \"L2\"},\n      {\"key\": \"index_type\", \"value\": \"IVF_FLAT\"},\n      {\"key\": \"params\", \"value\": \"{\\\"nlist\\\":1024}\"}\n    ]\n  }'\n\n\n\n\t\n\t\n\t\tParameter\n\t\tDescription\n        Options\n\t\n\t\n\t\n\t\n\t\tmetric_type\n\t\tType of metrics used to measure the similarity of vectors.\n        For floating point vectors:\n            \n                L2 (Euclidean distance)\n                IP (Inner product)\n            \n            For binary vectors:\n            \n                JACCARD (Jaccard distance)\n                TANIMOTO (Tanimoto distance)\n                HAMMING (Hamming distance)\n                SUPERSTRUCTURE (Superstructure)\n                SUBSTRUCTURE (Substructure)\n            \n        \n\t\n\t\n\t\tindex_type\n\t\tType of index used to accelerate the vector search.\n        For floating point vectors:\n            \n                FLAT (FLAT)\n                IVF_FLAT (IVF_FLAT)\n                IVF_SQ8 (IVF_SQ8)\n                IVF_PQ (IVF_PQ)\n                HNSW (HNSW)\n                ANNOY (ANNOY)\n                DISKANN* (DISK_ANN)\n            \n            For binary vectors:\n            \n                BIN_FLAT (BIN_FLAT)\n                BIN_IVF_FLAT (BIN_IVF_FLAT)\n            \n        \n\t\n\t\n\t\tparams\n\t\tBuilding parameter(s) specific to the index.\n        See In-memory Index and On-disk Index for more information.\n\t\n    \n        * DISKANN has certain prerequisites to meet. For details, see On-disk Index.\n    \n\t\n\n\n\t\n\t\n\t\tParameter\n\t\tDescription\n        Option\n\t\n\t\n\t\n\t\n\t\tmetric_type\n\t\tType of metrics used to measure the similarity of vectors.\n        For floating point vectors:\n            \n                L2 (Euclidean distance)\n                IP (Inner product)\n            \n            For binary vectors:\n            \n                JACCARD (Jaccard distance)\n                TANIMOTO (Tanimoto distance)\n                HAMMING (Hamming distance)\n                SUPERSTRUCTURE (Superstructure)\n                SUBSTRUCTURE (Substructure)\n            \n        \n\t\n\t\n\t\tindex_type\n\t\tType of index used to accelerate the vector search.\n        For floating point vectors:\n            \n                FLAT (FLAT)\n                IVF_FLAT (IVF_FLAT)\n                IVF_SQ8 (IVF_SQ8)\n                IVF_PQ (IVF_PQ)\n                HNSW (HNSW)\n                ANNOY (ANNOY)\n            \n            For binary vectors:\n            \n                BIN_FLAT (BIN_FLAT)\n                BIN_IVF_FLAT (BIN_IVF_FLAT)\n            \n        \n\t\n\t\n\t\tparams\n\t\tBuilding parameter(s) specific to the index.\n        See In-memory Index and On-disk Index for more information.\n\t\n\t\n\n\n\t\n\t\n\t\tParameter\n\t\tDescription\n        Options\n\t\n\t\n\t\n\t\n\t\tNewIndex func\n\t\tFunction to create entity. Index according to different index types.\n        For floating point vectors:\n            \n                NewIndexFlat (FLAT)\n                NewIndexIvfFlat (IVF_FLAT)\n                NewIndexIvfSQ8 (IVF_SQ8)\n                NewIndexIvfPQ (IVF_PQ)\n                NewIndexHNSW (HNSW)\n                NewIndexANNOY (ANNOY)\n\t\tNewIndexDISKANN* (DISK_ANN)\n            \n            For binary vectors:\n            \n                NewIndexBinFlat (BIN_FLAT)\n                NewIndexBinIvfFlat (BIN_IVF_FLAT)\n            \n        \n\t\n    \n\t\tmetricType\n\t\tType of metrics used to measure the similarity of vectors.\n        For floating point vectors:\n            \n                L2 (Euclidean distance)\n                IP (Inner product)\n            \n            For binary vectors:\n            \n                JACCARD (Jaccard distance)\n                TANIMOTO (Tanimoto distance)\n                HAMMING (Hamming distance)\n                SUPERSTRUCTURE (Superstructure)\n                SUBSTRUCTURE (Substructure)\n            \n        \n\t\n\t\n\t\tConstructParams\n\t\tBuilding parameter(s) specific to the index.\n        See In-memory Index and On-disk Index for more information.\n\t\n\t    \n\t\t* DISKANN has certain prerequisites to meet. For details, see On-disk Index.\n\t    \n\t\n\n\n\t\n\t\n\t\tParameter\n\t\tDescription\n        Options\n\t\n\t\n\t\n\t\n\t\tIndexType\n\t\tType of index used to accelerate the vector search.\n        For floating point vectors:\n            \n                FLAT (FLAT)\n                IVF_FLAT (IVF_FLAT)\n                IVF_SQ8 (IVF_SQ8)\n                IVF_PQ (IVF_PQ)\n                HNSW (HNSW)\n                ANNOY (ANNOY)\n                DISKANN* (DISK_ANN)\n            \n            For binary vectors:\n            \n                BIN_FLAT (BIN_FLAT)\n                BIN_IVF_FLAT (BIN_IVF_FLAT)\n            \n        \n\t\n\t\n\t\tExtraParam\n\t\tBuilding parameter(s) specific to the index.\n        See In-memory Index and On-disk Index for more information.\n\t\n    \n        * DISKANN has certain prerequisites to meet. For details, see On-disk Index.\n    \n\t\n\n\n    \n        \n            Option\n            Description\n        \n    \n    \n        \n            --help\n            Displays help for using the command.\n        \n    \n\n\n\t\n\t\n\t\tParameter\n\t\tDescription\n        Options\n\t\n\t\n\t\n    \n        collection_name\n        Name of the collection to build the index on.\n    \n    \n        field_name\n        Name of the vector field to build the index on.\n    \t\n    \n\t\tmetric_type\n\t\tType of metrics used to measure the similarity of vectors.\n        For floating point vectors:\n            \n                L2 (Euclidean distance)\n                IP (Inner product)\n            \n            For binary vectors:\n            \n                JACCARD (Jaccard distance)\n                TANIMOTO (Tanimoto distance)\n                HAMMING (Hamming distance)\n                SUPERSTRUCTURE (Superstructure)\n                SUBSTRUCTURE (Substructure)\n            \n        \n\t\n\t\n\t\tindex_type\n\t\tType of index used to accelerate the vector search.\n        For floating point vectors:\n            \n                FLAT (FLAT)\n                IVF_FLAT (IVF_FLAT)\n                IVF_SQ8 (IVF_SQ8)\n                IVF_PQ (IVF_PQ)\n                HNSW (HNSW)\n                ANNOY (ANNOY)\n            \n            For binary vectors:\n            \n                BIN_FLAT (BIN_FLAT)\n                BIN_IVF_FLAT (BIN_IVF_FLAT)\n            \n        \n\t\n\t\n\t\tparams\n\t\tBuilding parameter(s) specific to the index.\n        See In-memory Index for more information.\n\t\n\t\n\nBuild index\nBuild the index by specifying the vector field name and index parameters.\n\n  Python \n  Java\n  GO\n  Node.js\n\nfrom pymilvus import Collection, utility\n# Get an existing collection.\ncollection = Collection(\"book\")      \ncollection.create_index(\n  field_name=\"book_intro\", \n  index_params=index_params\n)\n\nutility.index_building_progress(\"book\")\n# Output: {'total_rows': 0, 'indexed_rows': 0}\n\nawait milvusClient.createIndex({\n  collection_name: \"book\",\n  field_name: \"book_intro\",\n  extra_params: index_params,\n});\n\nerr := milvusClient.CreateIndex(\n  context.Background(),        // ctx\n  \"book\",                      // CollectionName\n  \"book_intro\",                // fieldName\n  idx,                         // entity.Index\n  false,                       // async\n)\nif err != nil {\n  log.Fatal(\"fail to create index:\", err.Error())\n}\n\nmilvusClient.createIndex(\n  CreateIndexParam.newBuilder()\n    .withCollectionName(\"book\")\n    .withFieldName(\"book_intro\")\n    .withIndexType(INDEX_TYPE)\n    .withMetricType(MetricType.L2)\n    .withExtraParam(INDEX_PARAM)\n    .withSyncMode(Boolean.FALSE)\n    .build()\n);\n\n\n# Follow the previous step.\n\n# Follow the previous step.\n\n\n\n\t\n        \n            Parameter\n            Description\n        \n\t\n\t\n        \n            field_name\n            Name of the vector field to build index on.\n        \n        \n            index_params\n            Parameters of the index to build.\n        \n\t\n\n\n\t\n        \n            Parameter\n            Description\n        \n\t\n\t\n        \n            collection_name\n            Name of the collection to build index in.\n        \n        \n            field_name\n            Name of the vector field to build index on.\n        \n        \n            extra_params\n            Parameters of the index to build.\n        \n\t\n\n\n\t\n        \n            Parameter\n            Description\n        \n\t\n\t\n        \n            ctx\n            Context to control API invocation process.\n        \n        \n            CollectionName\n            Name of the collection to build index on.\n        \n        \n            fieldName\n            Name of the vector field to build index on.\n        \n        \n            entity.Index\n            Parameters of the index to build.\n        \n        \n            async\n            Switch to control sync/async behavior. The deadline of context is not applied in sync building process.\n        \n    \n\nWhat's next\n\nLearn more basic operations of Milvus:\n\nConduct a vector search\nConduct a hybrid search\nSearch with Time Travel\n\n\nbuild_index.md was last updated at 2023-07-24 07:52:06: update user guidesEdit this pageReport a bugRequest doc changesOn this pageBuild an Index on VectorsPrepare index parameterBuild indexWhat's nextResourcesDocsBlogManaged serviceTutorialsBootcampDemoVideoToolsAttuMilvus CLISizing ToolMivlus backup ToolCommunityGet involvedSlackGithubForumMilvus. 2023 All rights reserved./*<![CDATA[*/window.pagePath=\"/docs/build_index.md\";/*]]>*//*<![CDATA[*/window.___chunkMapping={\"polyfill\":[\"/polyfill.js\"],\"app\":[\"/app.js\"],\"component---src-pages-404-js\":[\"/component---src-pages-404-js.js\",\"/component---src-pages-404-js.ffef32ceb6972d1b6709.css\"],\"component---src-pages-bootcamp-jsx\":[\"/component---src-pages-bootcamp-jsx.js\",\"/component---src-pages-bootcamp-jsx.edf1a55d3c49094e9b41.css\"],\"component---src-pages-community-index-jsx\":[\"/component---src-pages-community-index-jsx.js\",\"/component---src-pages-community-index-jsx.c505d2a5fff7c1e4b2c8.css\"],\"component---src-pages-index-jsx\":[\"/component---src-pages-index-jsx.js\",\"/component---src-pages-index-jsx.45df0d4bdfe2db469d6c.css\"],\"component---src-pages-milvus-demos-index-jsx\":[\"/component---src-pages-milvus-demos-index-jsx.js\",\"/component---src-pages-milvus-demos-index-jsx.1a3d1c4caf417de255ae.css\"],\"component---src-pages-milvus-demos-reverse-image-search-jsx\":[\"/component---src-pages-milvus-demos-reverse-image-search-jsx.js\",\"/component---src-pages-milvus-demos-reverse-image-search-jsx.c41e4c5ead83649937e8.css\"],\"component---src-pages-slack-jsx\":[\"/component---src-pages-slack-jsx.js\",\"/component---src-pages-slack-jsx.b3b356986d01fe89f9d1.css\"],\"component---src-pages-tools-sizing-jsx\":[\"/component---src-pages-tools-sizing-jsx.js\",\"/component---src-pages-tools-sizing-jsx.66d1c05015f9508df90b.css\"],\"component---src-templates-api-doc-template-jsx\":[\"/component---src-templates-api-doc-template-jsx.js\",\"/component---src-templates-api-doc-template-jsx.6c57c73b99682695a5ef.css\"],\"component---src-templates-blog-list-template-jsx\":[\"/component---src-templates-blog-list-template-jsx.js\",\"/component---src-templates-blog-list-template-jsx.71f592374d478c258caf.css\"],\"component---src-templates-blog-template-jsx\":[\"/component---src-templates-blog-template-jsx.js\",\"/component---src-templates-blog-template-jsx.5068317f62135173b013.css\"],\"component---src-templates-doc-template-jsx\":[\"/component---src-templates-doc-template-jsx.js\",\"/component---src-templates-doc-template-jsx.0e85fbce360982ff881c.css\"]};/*]]>*/", "content_type": "text", "score": null, "meta": {"url": "https://milvus.io/docs/build_index.md"}, "id_hash_keys": ["content"], "embedding": null, "id": "da45d00812012669ad8d1cc2a0d42fb1"}