{"content": "<iframe src=\"https://www.googletagmanager.com/ns.html?id=G-V1G3KQ048M\" height=\"0\" width=\"0\" style=\"display: none; visibility: hidden\" aria-hidden=\"true\"></iframe>DocsTutorialsToolsBlogCommunityTry Managed Milvus FREEDocsTutorialsToolsBlogCommunityStars22kJoin SlackTry Managed Milvus FREEHow we use cookiesThis website stores cookies on your computer. By continuing to browse or by clicking \u2018Accept\u2019, you agree to the storing of cookies on your device to enhance your site experience and for analytical purposes.AcceptSearch\u2318KHomev2.2.x\u200bAbout MilvusGet StartedUser GuideManage Milvus ConnectionsManage DatabasesManage CollectionsCreate a CollectionRename a CollectionModify a CollectionCheck Collection InformationDrop a CollectionManage Collection AliasLoad CollectionRelease CollectionManage PartitionsManage DataManage IndexesSearch and QuerySearch with Time TravelBootcampAdministration GuideIntegrationsBenchmarksToolsReferenceExample ApplicationsFAQsAPI referenceCreate a Collection\nThis topic describes how to create a collection in Milvus.\nA collection consists of one or more partitions. While creating a new collection, Milvus creates a default partition _default. See Glossary - Collection for more information.\nThe following example builds a two-shard collection named book, with a primary key field named book_id, an INT64 scalar field named word_count, and a two-dimensional floating-point vector field named book_intro. Real applications will likely use much higher dimensional vectors than the example.\nPrepare Schema\n\nThe collection to create must contain a primary key field and a vector field. INT64 and VarChar are supported data type on primary key field.\n\nFirst, prepare necessary parameters, including field schema, collection schema, and collection name.\n\n  Python \n  Java\n  GO\n  Node.js\n  Curl\n\nfrom pymilvus import CollectionSchema, FieldSchema, DataType\nbook_id = FieldSchema(\n  name=\"book_id\",\n  dtype=DataType.INT64,\n  is_primary=True,\n)\nbook_name = FieldSchema(\n  name=\"book_name\",\n  dtype=DataType.VARCHAR,\n  max_length=200,\n)\nword_count = FieldSchema(\n  name=\"word_count\",\n  dtype=DataType.INT64,\n)\nbook_intro = FieldSchema(\n  name=\"book_intro\",\n  dtype=DataType.FLOAT_VECTOR,\n  dim=2\n)\nschema = CollectionSchema(\n  fields=[book_id, book_name, word_count, book_intro],\n  description=\"Test book search\",\n  enable_dynamic_field=True\n)\ncollection_name = \"book\"\n\nimport { DataType } from \"@zilliz/milvus2-sdk-node\";\nconst params = {\n  collection_name: \"book\",\n  description: \"Test book search\",\n  fields: [\n    {\n      name: \"book_intro\",\n      description: \"\",\n      data_type: DataType.FloatVector,\n      dim: 2,\n    },\n    {\n      name: \"book_id\",\n      data_type: DataType.Int64,\n      is_primary_key: true,\n      description: \"\",\n    },\n    {\n      name: \"book_name\",\n      data_type: DataType.VarChar,\n      max_length: 256,\n      description: \"\",\n    },\n    {\n      name: \"word_count\",\n      data_type: DataType.Int64,\n      description: \"\",\n    },\n  ],\n  enableDynamicField: true\n};\n\nvar (\n    collectionName = \"book\"\n    )\nschema := &entity.Schema{\n  CollectionName: collectionName,\n  Description:    \"Test book search\",\n  Fields: []*entity.Field{\n    {\n      Name:       \"book_id\",\n      DataType:   entity.FieldTypeInt64,\n      PrimaryKey: true,\n      AutoID:     false,\n    },\n    {\n      Name:       \"word_count\",\n      DataType:   entity.FieldTypeInt64,\n      PrimaryKey: false,\n      AutoID:     false,\n    },\n    {\n      Name:     \"book_intro\",\n      DataType: entity.FieldTypeFloatVector,\n      TypeParams: map[string]string{\n          \"dim\": \"2\",\n      },\n    },\n  },\n  EnableDynamicField: true\n}\n\nFieldType fieldType1 = FieldType.newBuilder()\n        .withName(\"book_id\")\n        .withDataType(DataType.Int64)\n        .withPrimaryKey(true)\n        .withAutoID(false)\n        .build();\nFieldType fieldType2 = FieldType.newBuilder()\n        .withName(\"word_count\")\n        .withDataType(DataType.Int64)\n        .build();\nFieldType fieldType3 = FieldType.newBuilder()\n        .withName(\"book_intro\")\n        .withDataType(DataType.FloatVector)\n        .withDimension(2)\n        .build();\nCreateCollectionParam createCollectionReq = CreateCollectionParam.newBuilder()\n        .withCollectionName(\"book\")\n        .withDescription(\"Test book search\")\n        .withShardsNum(2)\n        .addFieldType(fieldType1)\n        .addFieldType(fieldType2)\n        .addFieldType(fieldType3)\n        .withEnableDynamicField(true)\n        .build();\n\n\ncreate collection -c book -f book_id:INT64:book_id -f word_count:INT64:word_count -f book_intro:FLOAT_VECTOR:2 -p book_id\n\n\ncurl -X 'POST' \\\n  '${MILVUS_HOST}:${MILVUS_PORT}/v1/vector/collections/create'' \\\n  -H 'Authorization: Bearer ${TOKEN}'\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n       \"dbName\": \"default\",   \n       \"collectionName\": \"medium_articles\",\n       \"dimension\": 256,\n       \"metricType\": \"L2\",\n       \"primaryField\": \"id\",\n       \"vectorField\": \"vector\"\n      }'\n\n\nOutput:\n{\n    \"code\": 200,\n    \"data\": {}\n}\n\n\n\n\t\n        \n            Parameter\n            Description\n            Option\n        \n\t\n\t\n        \n            FieldSchema\n            Schema of the fields within the collection to create. Refer to Schema for more information.\n            N/A\n        \n        \n            name\n            Name of the field to create.\n            N/A\n        \n        \n            dtype\n            Data type of the field to create.\n            For primary key field:\n                \n                    DataType.INT64 (numpy.int64)\n                    DataType.VARCHAR (VARCHAR)\n                \n                For scalar field:\n                \n                    DataType.BOOL (Boolean)\n                    DataType.INT8 (numpy.int8)\n                    DataType.INT16 (numpy.int16)\n                    DataType.INT32 (numpy.int32)\n                    DataType.INT64 (numpy.int64)\n                    DataType.FLOAT (numpy.float32)\n                    DataType.DOUBLE (numpy.double)\n                    DataType.VARCHAR (VARCHAR)\n                    DataType.JSON (JSON) \n                \n                For vector field:\n                \n                    BINARY_VECTOR (Binary vector)\n                    FLOAT_VECTOR (Float vector)\n                \n            \n        \n        \n            is_primary (Mandatory for primary key field)\n            Switch to control if the field is primary key field.\n            True or False\n        \n        \n            auto_id (Mandatory for primary key field)\n            Switch to enable or disable automatic ID (primary key) allocation.\n            True or False\n        \n        \n            max_length (Mandatory for VARCHAR field)\n            Maximum length of strings allowed to be inserted.\n            [1, 65,535]\n        \n        \n            dim (Mandatory for vector field)\n            Dimension of the vector.\n            [1, 32,768]\n        \n        \n            description (Optional)\n            Description of the field.\n            N/A\n        \n        \n            CollectionSchema\n        Schema of the collection to create. Refer to Schema for more information.\n        N/A\n        \n        \n            fields\n            Fields of the collection to create.\n            N/A\n        \n        \n            description (Optional)\n            Description of the collection to create.\n            N/A\n        \n        \n            collection_name\n            Name of the collection to create.\n            N/A\n        \n\t\n\n\n\t\n        \n            Parameter\n            Description\n            Option\n        \n\t\n\t\n        \n            collectionName\n            Name of the collection to create.\n            N/A\n        \n        \n            description\n            Description of the collection to create.\n            N/A\n        \n        \n            Fields\n            Schema of the fields within the collection to create. Refer to Schema for more information.\n            N/A\n        \n        \n            Name\n            Name of the field to create.\n            N/A\n        \n        \n            DataType\n            Data type of the field to create.\n            For primary key field:\n                \n                    entity.FieldTypeInt64 (numpy.int64)\n                    entity.FieldTypeVarChar (VARCHAR)\n                \n                For scalar field:\n                \n                    entity.FieldTypeBool (Boolean)\n                    entity.FieldTypeInt8 (numpy.int8)\n                    entity.FieldTypeInt16 (numpy.int16)\n                    entity.FieldTypeInt32 (numpy.int32)\n                    entity.FieldTypeInt64 (numpy.int64)\n                    entity.FieldTypeFloat (numpy.float32)\n                    entity.FieldTypeDouble (numpy.double)\n                    entity.FieldTypeVarChar (VARCHAR)\n                \n                For vector field:\n                \n                    entity.FieldTypeBinaryVector (Binary vector)\n                    entity.FieldTypeFloatVector (Float vector)\n                \n            \n        \n        \n            PrimaryKey (Mandatory for primary key field)\n            Switch to control if the field is primary key field.\n            True or False\n        \n        \n            AutoID (Mandatory for primary key field)\n            Switch to enable or disable Automatic ID (primary key) allocation.\n            True or False\n        \n        \n            dim (Mandatory for vector field)\n            Dimension of the vector.\n            [1, 32768]\n        \n\t\n\n\n\t\n        \n            Parameter\n            Description\n            Option\n        \n\t\n\t\n        \n            collection_name\n            Name of the collection to create.\n            N/A\n        \n        \n            description\n            Description of the collection to create.\n            N/A\n        \n        \n            fields\n            Schema of the field and the collection to create.\n            Refer to Schema for more information.\n        \n        \n            data_type\n            Data type of the filed to create.\n            Refer to data type reference number for more information.\n        \n        \n            is_primary_key (Mandatory for primary key field)\n            Switch to control if the field is primary key field.\n            true or false\n        \n        \n            autoID\n            Switch to enable or disable Automatic ID (primary key) allocation.\n            true or false\n        \n        \n            dim (Mandatory for vector field)\n            Dimension of the vector.\n            [1, 32768]\n        \n        \n            max_length (Mandatory for VarChar field)\n            Dimension of the vector.\n            [1, 32768]\n        \n        \n            description (Optional)\n            Description of the field.\n            N/A\n        \n\t\n\n\n\t\n        \n            Parameter\n            Description\n            Option\n        \n\t\n\t\n        \n            Name\n            Name of the field to create.\n            N/A\n        \n        \n            Description\n            Description of the field to create.\n            N/A\n        \n        \n            DataType\n            Data type of the field to create.\n            For primary key field:\n                \n                    entity.FieldTypeInt64 (numpy.int64)\n                    entity.FieldTypeVarChar (VARCHAR)\n                \n                For scalar field:\n                \n                    entity.FieldTypeBool (Boolean)\n                    entity.FieldTypeInt8 (numpy.int8)\n                    entity.FieldTypeInt16 (numpy.int16)\n                    entity.FieldTypeInt32 (numpy.int32)\n                    entity.FieldTypeInt64 (numpy.int64)\n                    entity.FieldTypeFloat (numpy.float32)\n                    entity.FieldTypeDouble (numpy.double)\n                    entity.FieldTypeVarChar (VARCHAR)\n                \n                For vector field:\n                \n                    entity.FieldTypeBinaryVector (Binary vector)\n                    entity.FieldTypeFloatVector (Float vector)\n                \n            \n        \n        \n            PrimaryKey (Mandatory for primary key field)\n            Switch to control if the field is primary key field.\n            True or False\n        \n        \n            AutoID\n            Switch to enable or disable Automatic ID (primary key) allocation.\n            True or False\n        \n        \n            Dimension (Mandatory for vector field)\n            Dimension of the vector.\n            [1, 32768]\n        \n        \n            CollectionName\n            Name of the collection to create.\n            N/A\n        \n        \n            Description (Optional)\n            Description of the collection to create.\n            N/A\n        \n        \n            ShardsNum\n            Number of the shards for the collection to create.\n            [1,16]\n        \n        \n            PartitionsNum\n            Number of the logical partitions for the collection to create.\n            [1,4096]\n        \n\t\n\n\n    \n        \n            Option\n            Description\n        \n    \n    \n        \n            -c\n            The name of the collection.\n        \n        \n            -f (Multiple)\n            The field schema in the <fieldName>:<dataType>:<dimOfVector/desc> format.\n        \n        \n            -p\n            The name of the primary key field.\n        \n        \n            -a (Optional)\n            Flag to generate IDs automatically.\n        \n        \n            -d (Optional)\n            The description of the collection.\n        \n    \n\n\n    \n        \n            Parameter\n            Description\n            Option\n        \n    \n    \n        \n            dbName\n            The name of the database to which the collection to create belongs to.\n            N/A\n        \n        \n            collectionName\n            (Required) The name of the collection to create.\n            N/A\n        \n        \n            dimension\n            (Required) The number of dimensions for the vector field of the collection.The value ranges from 32 to 32768.\n            N/A\n        \n        \n            metricType\n            The distance metric used for the collection.The value defaults to L2.\n            N/A\n        \n        \n            primaryField\n            The name of the primary key field.The value defaults to id.\n            N/A\n        \n        \n            vectorField(field)\n            The name of the vector field.The value defaults to vector.\n            N/A\n        \n    \n\nCreate a collection with the schema\nThen, create a collection with the schema you specified above.\n\n  Python \n  Java\n  GO\n  Node.js\n\nfrom pymilvus import Collection\ncollection = Collection(\n    name=collection_name,\n    schema=schema,\n    using='default',\n    shards_num=2\n    )\n\nawait milvusClient.createCollection(params);\n\nerr = milvusClient.CreateCollection(\n    context.Background(), // ctx\n    schema,\n    2, // shardNum\n)\nif err != nil {\n    log.Fatal(\"failed to create collection:\", err.Error())\n}\n\nmilvusClient.createCollection(createCollectionReq);\n\n\n\t\n        \n            Parameter\n            Description\n            Option\n        \n\t\n\t\n        \n            using (optional)\n            By specifying the server alias here, you can choose in which Milvus server you create a collection.\n            N/A\n        \n        \n            shards_num (optional)\n            Number of the shards for the collection to create.\n            [1,16]\n        \n        \n            num_partitions (optional)\n            Number of logical partitions for the collection to create.\n            [1,4096]\n        \n\t    \n            *kwargs: collection.ttl.seconds (optional)\n            Collection time to live (TTL) is the expiration time of a collection. Data in an expired collection will be cleaned up and will not be involved in searches or queries. Specify TTL in the unit of seconds.\n            The value should be 0 or greater. 0 means TTL is disabled.\n        \n    \n\n\n\t\n        \n            Parameter\n            Description\n            Option\n        \n\t\n\t\n        \n            ctx\n            Context to control API invocation process.\n            N/A\n        \n        \n            shardNum\n            Number of the shards for the collection to create.\n            [1,16]\n        \n    \n\nLimits\n\n\n\nFeature\nMaximum limit\n\n\n\n\nLength of a collection name\n255 characters\n\n\nNumber of partitions in a collection\n4,096\n\n\nNumber of fields in a collection\n64\n\n\nNumber of shards in a collection\n16\n\n\n\nWhat's next\n\nLearn more basic operations of Milvus:\n\nInsert data into Milvus\nCreate a partition\nBuild an index for vectors\nConduct a vector search\nConduct a hybrid search\n\n\ncreate_collection.md was last updated at 2023-07-24 18:37:26: update user guidesEdit this pageReport a bugRequest doc changesOn this pageCreate a CollectionPrepare SchemaCreate a collection with the schemaLimitsWhat's nextResourcesDocsBlogManaged serviceTutorialsBootcampDemoVideoToolsAttuMilvus CLISizing ToolMivlus backup ToolCommunityGet involvedSlackGithubForumMilvus. 2023 All rights reserved./*<![CDATA[*/window.pagePath=\"/docs/create_collection.md\";/*]]>*//*<![CDATA[*/window.___chunkMapping={\"polyfill\":[\"/polyfill.js\"],\"app\":[\"/app.js\"],\"component---src-pages-404-js\":[\"/component---src-pages-404-js.js\",\"/component---src-pages-404-js.ffef32ceb6972d1b6709.css\"],\"component---src-pages-bootcamp-jsx\":[\"/component---src-pages-bootcamp-jsx.js\",\"/component---src-pages-bootcamp-jsx.edf1a55d3c49094e9b41.css\"],\"component---src-pages-community-index-jsx\":[\"/component---src-pages-community-index-jsx.js\",\"/component---src-pages-community-index-jsx.c505d2a5fff7c1e4b2c8.css\"],\"component---src-pages-index-jsx\":[\"/component---src-pages-index-jsx.js\",\"/component---src-pages-index-jsx.45df0d4bdfe2db469d6c.css\"],\"component---src-pages-milvus-demos-index-jsx\":[\"/component---src-pages-milvus-demos-index-jsx.js\",\"/component---src-pages-milvus-demos-index-jsx.1a3d1c4caf417de255ae.css\"],\"component---src-pages-milvus-demos-reverse-image-search-jsx\":[\"/component---src-pages-milvus-demos-reverse-image-search-jsx.js\",\"/component---src-pages-milvus-demos-reverse-image-search-jsx.c41e4c5ead83649937e8.css\"],\"component---src-pages-slack-jsx\":[\"/component---src-pages-slack-jsx.js\",\"/component---src-pages-slack-jsx.b3b356986d01fe89f9d1.css\"],\"component---src-pages-tools-sizing-jsx\":[\"/component---src-pages-tools-sizing-jsx.js\",\"/component---src-pages-tools-sizing-jsx.66d1c05015f9508df90b.css\"],\"component---src-templates-api-doc-template-jsx\":[\"/component---src-templates-api-doc-template-jsx.js\",\"/component---src-templates-api-doc-template-jsx.6c57c73b99682695a5ef.css\"],\"component---src-templates-blog-list-template-jsx\":[\"/component---src-templates-blog-list-template-jsx.js\",\"/component---src-templates-blog-list-template-jsx.71f592374d478c258caf.css\"],\"component---src-templates-blog-template-jsx\":[\"/component---src-templates-blog-template-jsx.js\",\"/component---src-templates-blog-template-jsx.5068317f62135173b013.css\"],\"component---src-templates-doc-template-jsx\":[\"/component---src-templates-doc-template-jsx.js\",\"/component---src-templates-doc-template-jsx.0e85fbce360982ff881c.css\"]};/*]]>*/", "content_type": "text", "score": null, "meta": {"url": "https://milvus.io/docs/create_collection.md"}, "id_hash_keys": ["content"], "embedding": null, "id": "77f2a73d53e33080d3ebca8cfe5ffb0b"}