{"content": "<iframe src=\"https://www.googletagmanager.com/ns.html?id=G-V1G3KQ048M\" height=\"0\" width=\"0\" style=\"display: none; visibility: hidden\" aria-hidden=\"true\"></iframe>DocsTutorialsToolsBlogCommunityTry Managed Milvus FREEDocsTutorialsToolsBlogCommunityStars22kJoin SlackTry Managed Milvus FREEHow we use cookiesThis website stores cookies on your computer. By continuing to browse or by clicking \u2018Accept\u2019, you agree to the storing of cookies on your device to enhance your site experience and for analytical purposes.AcceptSearch\u2318KHomev2.2.x\u200bAbout MilvusGet StartedPrerequisitesInstall MilvusInstall SDKsWith Milvus LiteHello MilvusUser GuideAdministration GuideIntegrationsBenchmarksToolsReferenceExample ApplicationsFAQsAPI referencePythonNode.js\nRun Milvus using Python\nThis topic describes how to run Milvus using Python.\nThrough running the example code we provided, you will have a primary understanding of what Milvus is capable of.\nPreparations\n\nMilvus 2.2.12\nPython 3 (3.7.1 or later)\nPyMilvus 2.2.x\n\nDownload example code\nDownload hello_milvus.py directly or with the following command.\n$ wget https://raw.githubusercontent.com/milvus-io/pymilvus/master/examples/hello_milvus.py\n\nScan the example code\nThe example code performs the following steps.\n\nImports a PyMilvus package:\n\nfrom pymilvus import (\n    connections,\n    utility,\n    FieldSchema,\n    CollectionSchema,\n    DataType,\n    Collection,\n)\n\n\nConnects to a server:\n\nconnections.connect(\"default\", host=\"localhost\", port=\"19530\")\n\n\nCreates a collection:\n\nfields = [\n    FieldSchema(name=\"pk\", dtype=DataType.INT64, is_primary=True, auto_id=False),\n    FieldSchema(name=\"random\", dtype=DataType.DOUBLE),\n    FieldSchema(name=\"embeddings\", dtype=DataType.FLOAT_VECTOR, dim=8)\n]\nschema = CollectionSchema(fields, \"hello_milvus is the simplest demo to introduce the APIs\")\nhello_milvus = Collection(\"hello_milvus\", schema)\n\n\nInserts vectors in the collection:\n\nimport random\nentities = [\n    [i for i in range(3000)],  # field pk\n    [float(random.randrange(-20, -10)) for _ in range(3000)],  # field random\n    [[random.random() for _ in range(8)] for _ in range(3000)],  # field embeddings\n]\ninsert_result = hello_milvus.insert(entities)\n# After final entity is inserted, it is best to call flush to have no growing segments left in memory\nhello_milvus.flush()  \n\n\nBuilds indexes on the entities:\n\nindex = {\n    \"index_type\": \"IVF_FLAT\",\n    \"metric_type\": \"L2\",\n    \"params\": {\"nlist\": 128},\n}\nhello_milvus.create_index(\"embeddings\", index)\n\n\nLoads the collection to memory and performs a vector similarity search:\n\nhello_milvus.load()\nvectors_to_search = entities[-1][-2:]\nsearch_params = {\n    \"metric_type\": \"L2\",\n    \"params\": {\"nprobe\": 10},\n}\nresult = hello_milvus.search(vectors_to_search, \"embeddings\", search_params, limit=3, output_fields=[\"random\"])\n\n\nPerforms a vector query:\n\nresult = hello_milvus.query(expr=\"random > -14\", output_fields=[\"random\", \"embeddings\"])\n\n\nPerforms a hybrid search:\n\nresult = hello_milvus.search(vectors_to_search, \"embeddings\", search_params, limit=3, expr=\"random > -12\", output_fields=[\"random\"])\n\n\nDeletes entities by their primary keys:\n\nexpr = f\"pk in [{entities[0]}, {entities[1]}]\"\nhello_milvus.delete(expr)\n\n\nDrops the collection:\n\nutility.drop_collection(\"hello_milvus\")\n\nRun the example code\nExecute the following command to run the example code.\n$ python3 hello_milvus.py\n\nThe returned results and query latency are shown as follows:\n=== start connecting to Milvus     ===\n\nDoes collection hello_milvus exist in Milvus: False\n\n=== Create collection `hello_milvus` ===\n\n\n=== Start inserting entities       ===\n\nNumber of entities in Milvus: 3000\n\n=== Start Creating index IVF_FLAT  ===\n\n\n=== Start loading                  ===\n\n\n=== Start searching based on vector similarity ===\n\nhit: (distance: 0.0, id: 2998), random field: -11.0\nhit: (distance: 0.11455299705266953, id: 1581), random field: -18.0\nhit: (distance: 0.1232629269361496, id: 2647), random field: -13.0\nhit: (distance: 0.0, id: 2999), random field: -11.0\nhit: (distance: 0.10560893267393112, id: 2430), random field: -18.0\nhit: (distance: 0.13938161730766296, id: 377), random field: -14.0\nsearch latency = 0.2796s\n\n=== Start querying with `random > -14` ===\n\nquery result:\n-{'pk': 9, 'random': -13.0, 'embeddings': [0.298433, 0.931987, 0.949756, 0.598713, 0.290125, 0.094323, 0.064444, 0.306993]}\nsearch latency = 0.2970s\n\n=== Start hybrid searching with `random > -12` ===\n\nhit: (distance: 0.0, id: 2998), random field: -11.0\nhit: (distance: 0.15773043036460876, id: 472), random field: -11.0\nhit: (distance: 0.3273330628871918, id: 2146), random field: -11.0\nhit: (distance: 0.0, id: 2999), random field: -11.0\nhit: (distance: 0.15844076871871948, id: 2218), random field: -11.0\nhit: (distance: 0.1622171700000763, id: 1403), random field: -11.0\nsearch latency = 0.3028s\n\n=== Start deleting with expr `pk in [0, 1]` ===\n\nquery before delete by expr=`pk in [0, 1]` -> result: \n-{'pk': 0, 'random': -18.0, 'embeddings': [0.142279, 0.414248, 0.378628, 0.971863, 0.535941, 0.107011, 0.207052, 0.98182]}\n-{'pk': 1, 'random': -15.0, 'embeddings': [0.57512, 0.358512, 0.439131, 0.862369, 0.083284, 0.294493, 0.004961, 0.180082]}\n\nquery after delete by expr=`pk in [0, 1]` -> result: []\n\n\n=== Drop collection `hello_milvus` ===\n\n\nCongratulations! You have started Milvus standalone and performed your first vector similarity search.example_code.md was last updated at 2023-05-29 20:50:43: Update example_code.mdEdit this pageReport a bugRequest doc changesOn this pageRun Milvus using PythonPreparationsDownload example codeScan the example codeRun the example codeResourcesDocsBlogManaged serviceTutorialsBootcampDemoVideoToolsAttuMilvus CLISizing ToolMivlus backup ToolCommunityGet involvedSlackGithubForumMilvus. 2023 All rights reserved./*<![CDATA[*/window.pagePath=\"/docs/example_code.md\";/*]]>*//*<![CDATA[*/window.___chunkMapping={\"polyfill\":[\"/polyfill.js\"],\"app\":[\"/app.js\"],\"component---src-pages-404-js\":[\"/component---src-pages-404-js.js\",\"/component---src-pages-404-js.ffef32ceb6972d1b6709.css\"],\"component---src-pages-bootcamp-jsx\":[\"/component---src-pages-bootcamp-jsx.js\",\"/component---src-pages-bootcamp-jsx.edf1a55d3c49094e9b41.css\"],\"component---src-pages-community-index-jsx\":[\"/component---src-pages-community-index-jsx.js\",\"/component---src-pages-community-index-jsx.c505d2a5fff7c1e4b2c8.css\"],\"component---src-pages-index-jsx\":[\"/component---src-pages-index-jsx.js\",\"/component---src-pages-index-jsx.45df0d4bdfe2db469d6c.css\"],\"component---src-pages-milvus-demos-index-jsx\":[\"/component---src-pages-milvus-demos-index-jsx.js\",\"/component---src-pages-milvus-demos-index-jsx.1a3d1c4caf417de255ae.css\"],\"component---src-pages-milvus-demos-reverse-image-search-jsx\":[\"/component---src-pages-milvus-demos-reverse-image-search-jsx.js\",\"/component---src-pages-milvus-demos-reverse-image-search-jsx.c41e4c5ead83649937e8.css\"],\"component---src-pages-slack-jsx\":[\"/component---src-pages-slack-jsx.js\",\"/component---src-pages-slack-jsx.b3b356986d01fe89f9d1.css\"],\"component---src-pages-tools-sizing-jsx\":[\"/component---src-pages-tools-sizing-jsx.js\",\"/component---src-pages-tools-sizing-jsx.66d1c05015f9508df90b.css\"],\"component---src-templates-api-doc-template-jsx\":[\"/component---src-templates-api-doc-template-jsx.js\",\"/component---src-templates-api-doc-template-jsx.6c57c73b99682695a5ef.css\"],\"component---src-templates-blog-list-template-jsx\":[\"/component---src-templates-blog-list-template-jsx.js\",\"/component---src-templates-blog-list-template-jsx.71f592374d478c258caf.css\"],\"component---src-templates-blog-template-jsx\":[\"/component---src-templates-blog-template-jsx.js\",\"/component---src-templates-blog-template-jsx.5068317f62135173b013.css\"],\"component---src-templates-doc-template-jsx\":[\"/component---src-templates-doc-template-jsx.js\",\"/component---src-templates-doc-template-jsx.0e85fbce360982ff881c.css\"]};/*]]>*/", "content_type": "text", "score": null, "meta": {"url": "https://milvus.io/docs/example_code.md"}, "id_hash_keys": ["content"], "embedding": null, "id": "4dc0bf89d0cebbe330eb8aeea8921239"}