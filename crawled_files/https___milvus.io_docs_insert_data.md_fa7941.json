{"content": "<iframe src=\"https://www.googletagmanager.com/ns.html?id=G-V1G3KQ048M\" height=\"0\" width=\"0\" style=\"display: none; visibility: hidden\" aria-hidden=\"true\"></iframe>DocsTutorialsToolsBlogCommunityTry Managed Milvus FREEDocsTutorialsToolsBlogCommunityStars22kJoin SlackTry Managed Milvus FREEHow we use cookiesThis website stores cookies on your computer. By continuing to browse or by clicking \u2018Accept\u2019, you agree to the storing of cookies on your device to enhance your site experience and for analytical purposes.AcceptSearch\u2318KHomev2.2.x\u200bAbout MilvusGet StartedUser GuideManage Milvus ConnectionsManage DatabasesManage CollectionsManage PartitionsManage DataInsert EntitiesInsert Entities from FilesDelete EntitiesCompact DataManage IndexesSearch and QuerySearch with Time TravelBootcampAdministration GuideIntegrationsBenchmarksToolsReferenceExample ApplicationsFAQsAPI referenceInsert Entities\nThis topic describes how to insert data in Milvus via client.\nYou can also migrate data to Milvus with MilvusDM, an open-source tool designed specifically for importing and exporting data with Milvus.\nMilvus 2.1 supports VARCHAR data type on scalar field. When building indexes for VARCHAR-type scalar fields, the default index type is dictionary tree.\nThe following example inserts 2,000 rows of randomly generated data as the example data (Milvus CLI example uses a pre-built, remote CSV file containing similar data). Real applications will likely use much higher dimensional vectors than the example. You can prepare your own data to replace the example.\nPrepare data\nFirst, prepare the data to insert.  Data type of the data to insert must match the schema of the collection, otherwise Milvus will raise exception.\nOnce you enable dynamic schema, you can append dynamic fields in the data. For details, refer to Dynamic Schema.\n\n  Python \n  Java\n  GO\n  Node.js\n  Curl\n\nimport random\ndata = [\n  [i for i in range(2000)],\n  [str(i) for i in range(2000)],\n  [i for i in range(10000, 12000)],\n  [[random.random() for _ in range(2)] for _ in range(2000)]\n]\n\n## Once your collection is enabled with dynamic schema,\n## you can add non-existing field values.\ndata.append([str(\"dy\"*i) for i in range(2000)])\n\nconst data = Array.from({ length: 2000 }, (v,k) => ({\n  \"book_id\": k,\n  \"word_count\": k+10000,\n  \"book_intro\": Array.from({ length: 2 }, () => Math.random()),\n}));\n\nbookIDs := make([]int64, 0, 2000)\nwordCounts := make([]int64, 0, 2000)\nbookIntros := make([][]float32, 0, 2000)\nfor i := 0; i < 2000; i++ {\n\tbookIDs = append(bookIDs, int64(i))\n\twordCounts = append(wordCounts, int64(i+10000))\n\tv := make([]float32, 0, 2)\n\tfor j := 0; j < 2; j++ {\n\t\tv = append(v, rand.Float32())\n\t}\n\tbookIntros = append(bookIntros, v)\n}\nidColumn := entity.NewColumnInt64(\"book_id\", bookIDs)\nwordColumn := entity.NewColumnInt64(\"word_count\", wordCounts)\nintroColumn := entity.NewColumnFloatVector(\"book_intro\", 2, bookIntros)\n\nRandom ran = new Random();\nList<Long> book_id_array = new ArrayList<>();\nList<Long> word_count_array = new ArrayList<>();\nList<List<Float>> book_intro_array = new ArrayList<>();\nfor (long i = 0L; i < 2000; ++i) {\n\tbook_id_array.add(i);\n\tword_count_array.add(i + 10000);\n\tList<Float> vector = new ArrayList<>();\n\tfor (int k = 0; k < 2; ++k) {\n\t\tvector.add(ran.nextFloat());\n\t}\n\tbook_intro_array.add(vector);\n}\n\n\n# Prepare your data in a CSV file. Milvus CLI only supports importing data from local or remote files.\n\n\n# See the following step.\n\nInsert data to Milvus\nInsert the data to the collection.\nBy specifying partition_name, you can optionally decide to which partition to insert the data.\n\n  Python \n  Java\n  GO\n  Node.js\n  CLI\n  Curl\n\nfrom pymilvus import Collection\ncollection = Collection(\"book\")      # Get an existing collection.\nmr = collection.insert(data)\n\nconst mr = await milvusClient.insert({\n  collection_name: \"book\",\n  fields_data: data,\n});\n\n_, err = milvusClient.Insert(\n\tcontext.Background(), // ctx\n\t\"book\",               // CollectionName\n\t\"\",                   // partitionName\n\tidColumn,             // columnarData\n\twordColumn,           // columnarData\n\tintroColumn,          // columnarData\n)\nif err != nil {\n\tlog.Fatal(\"failed to insert data:\", err.Error())\n}\n\nList<InsertParam.Field> fields = new ArrayList<>();\nfields.add(new InsertParam.Field(\"book_id\", book_id_array));\nfields.add(new InsertParam.Field(\"word_count\", word_count_array));\nfields.add(new InsertParam.Field(\"book_intro\", book_intro_array));\n\nInsertParam insertParam = InsertParam.newBuilder()\n  .withCollectionName(\"book\")\n  .withPartitionName(\"novel\")\n  .withFields(fields)\n  .build();\nmilvusClient.insert(insertParam);\n\n\nimport -c book 'https://raw.githubusercontent.com/milvus-io/milvus_cli/main/examples/user_guide/search.csv'\n\n\n# insert an entity to a collection\ncurl -X 'POST' \\\n  '${MILVUS_HOST}:${MILVUS_PORT}/v1/vector/insert'  \\\n  -H 'Authorization: Bearer ${TOKEN}' \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n         \"collectionName\": \"collection1\",\n         \"data\": {\n             \"id\": \"id1\",\n             \"vector\": [0.1, 0.2, 0.3],\n             \"name\": \"tom\",\n             \"email\": \"tom@zilliz.com\",\n             \"date\": \"2023-04-13\"\n          }\n     }'\n\n# insert multiple entities\ncurl --request POST \\\n     --url '${MILVUS_HOST}:${MILVUS_PORT}/v1/vector/insert' \\\n     --header 'Authorization: Bearer <TOKEN>' \\\n     --header 'accept: application/json' \\\n     --header 'content-type: application/json'\n     -d '{\n         \"collectionName\": \"collection1\",\n         \"data\": [\n             {\n                \"id\": \"id1\",\n                \"vector\": [0.1, 0.2, 0.3],\n                \"name\": \"bob\",\n                \"email\": \"bob@zilliz.com\",\n                \"date\": \"2023-04-13\"\n             },{\n                \"id\": \"id2\",\n                \"vector\": [0.1, 0.2, 0.3],\n                \"name\": \"ally\",\n                \"email\": \"ally@zilliz.com\",\n                \"date\": \"2023-04-11\"\n             }\n         ]\n     }'\n\n\nOutput:\n{\n    \"code\": 200,\n    \"data\": {\n        \"insertCount\": \"integer\"\n    }\n}\n\n\n\n\t\n\t\n\t\tParameter\n\t\tDescription\n\t\n\t\n\t\n    \n\t\tdata\n\t\tData to insert into Milvus.\n\t\n\t\n\t\tpartition_name (optional)\n\t\tName of the partition to insert data into.\n\t\n\t\n\n\n\t\n\t\n\t\tParameter\n\t\tDescription\n\t\n\t\n\t\n\t\n\t\tcollection_name\n\t\tName of the collection to insert data into.\n\t\n  \n\t\tpartition_name (optional)\n\t\tName of the partition to insert data into.\n\t\n  \n\t\tfields_data\n\t\tData to insert into Milvus.\n\t\n\t\n\n\n\t\n    \n        Parameter\n        Description\n    \n\t\n\t\n    \n        ctx\n        Context to control API invocation process.\n    \n    \n        CollectionName\n        Name of the collection to insert data into.\n    \n    \n        partitionName\n        Name of the partition to insert data into. Data will be inserted in the default partition if left blank.\n    \n\t\n        columnarData\n        Data to insert into each field.\n    \n  \n\n\n\t\n\t\n\t\tParameter\n\t\tDescription\n\t\n\t\n\t\n\t\n\t\tfieldName\n\t\tName of the field to insert data into.\n\t\n\t\n\t\tDataType\n\t\tData type of the field to insert data into.\n\t\n    \n\t\tdata\n\t\tData to insert into each field.\n\t\n\t\t\n\t\tCollectionName\n\t\tName of the collection to insert data into.\n\t\n\t\n\t\tPartitionName (optional)\n\t\tName of the partition to insert data into.\n\t\n\t\n\n\n    \n        \n            Option\n            Description\n        \n    \n    \n        \n            -c\n            Name of the collection to insert data into.\n        \n        \n            -p (Optional)\n            Name of the partition to insert data into.\n        \n    \n\n\n    \n        \n            Parameter\n            Description\n            Option\n        \n    \n    \n        \n            collectionName\n            The name of the collection to which entities will be inserted.\n            N/A\n        \n        \n            data\n            Data to insert into Milvus.\n            N/A\n        \n        \n            field_name\n            An entity object. Note that the keys in the entity should match the collection schema.\n            N/A\n        \n    \n\nFlush the Data in Milvus\nWhen data is inserted into Milvus it is inserted into segments. Segments have to reach a certain size to be sealed and indexed. Unsealed segments will be searched brute force. In order to avoid this with any remainder data, it is best to call flush(). The flush call will seal any remaining segments and send them for indexing. It is important to only call this at the end of an insert session, as calling this too much will cause fragmented data that will need to be cleaned later on.\nLimits\n\n\n\nFeature\nMaximum limit\n\n\n\n\nDimensions of a vector\n32,768\n\n\n\nWhat's next\n\nLearn more basic operations of Milvus:\n\nBuild an index for vectors\nConduct a vector search\nConduct a hybrid search\n\n\ninsert_data.md was last updated at 2023-07-24 07:52:06: update user guidesEdit this pageReport a bugRequest doc changesOn this pageInsert EntitiesPrepare dataInsert data to MilvusFlush the Data in MilvusLimitsWhat's nextResourcesDocsBlogManaged serviceTutorialsBootcampDemoVideoToolsAttuMilvus CLISizing ToolMivlus backup ToolCommunityGet involvedSlackGithubForumMilvus. 2023 All rights reserved./*<![CDATA[*/window.pagePath=\"/docs/insert_data.md\";/*]]>*//*<![CDATA[*/window.___chunkMapping={\"polyfill\":[\"/polyfill.js\"],\"app\":[\"/app.js\"],\"component---src-pages-404-js\":[\"/component---src-pages-404-js.js\",\"/component---src-pages-404-js.ffef32ceb6972d1b6709.css\"],\"component---src-pages-bootcamp-jsx\":[\"/component---src-pages-bootcamp-jsx.js\",\"/component---src-pages-bootcamp-jsx.edf1a55d3c49094e9b41.css\"],\"component---src-pages-community-index-jsx\":[\"/component---src-pages-community-index-jsx.js\",\"/component---src-pages-community-index-jsx.c505d2a5fff7c1e4b2c8.css\"],\"component---src-pages-index-jsx\":[\"/component---src-pages-index-jsx.js\",\"/component---src-pages-index-jsx.45df0d4bdfe2db469d6c.css\"],\"component---src-pages-milvus-demos-index-jsx\":[\"/component---src-pages-milvus-demos-index-jsx.js\",\"/component---src-pages-milvus-demos-index-jsx.1a3d1c4caf417de255ae.css\"],\"component---src-pages-milvus-demos-reverse-image-search-jsx\":[\"/component---src-pages-milvus-demos-reverse-image-search-jsx.js\",\"/component---src-pages-milvus-demos-reverse-image-search-jsx.c41e4c5ead83649937e8.css\"],\"component---src-pages-slack-jsx\":[\"/component---src-pages-slack-jsx.js\",\"/component---src-pages-slack-jsx.b3b356986d01fe89f9d1.css\"],\"component---src-pages-tools-sizing-jsx\":[\"/component---src-pages-tools-sizing-jsx.js\",\"/component---src-pages-tools-sizing-jsx.66d1c05015f9508df90b.css\"],\"component---src-templates-api-doc-template-jsx\":[\"/component---src-templates-api-doc-template-jsx.js\",\"/component---src-templates-api-doc-template-jsx.6c57c73b99682695a5ef.css\"],\"component---src-templates-blog-list-template-jsx\":[\"/component---src-templates-blog-list-template-jsx.js\",\"/component---src-templates-blog-list-template-jsx.71f592374d478c258caf.css\"],\"component---src-templates-blog-template-jsx\":[\"/component---src-templates-blog-template-jsx.js\",\"/component---src-templates-blog-template-jsx.5068317f62135173b013.css\"],\"component---src-templates-doc-template-jsx\":[\"/component---src-templates-doc-template-jsx.js\",\"/component---src-templates-doc-template-jsx.0e85fbce360982ff881c.css\"]};/*]]>*/", "content_type": "text", "score": null, "meta": {"url": "https://milvus.io/docs/insert_data.md"}, "id_hash_keys": ["content"], "embedding": null, "id": "26ea43b16206742a673ac40ad60cbc8a"}