{"content": "<iframe src=\"https://www.googletagmanager.com/ns.html?id=G-V1G3KQ048M\" height=\"0\" width=\"0\" style=\"display: none; visibility: hidden\" aria-hidden=\"true\"></iframe>DocsTutorialsToolsBlogCommunityTry Managed Milvus FREEDocsTutorialsToolsBlogCommunityStars22kJoin SlackTry Managed Milvus FREEHow we use cookiesThis website stores cookies on your computer. By continuing to browse or by clicking \u2018Accept\u2019, you agree to the storing of cookies on your device to enhance your site experience and for analytical purposes.AcceptSearch\u2318KHomev2.2.x\u200bAbout MilvusGet StartedUser GuideManage Milvus ConnectionsManage DatabasesManage CollectionsManage PartitionsManage DataManage IndexesSearch and QuerySearchHybrid SearchQuerySearch with Time TravelBootcampAdministration GuideIntegrationsBenchmarksToolsReferenceExample ApplicationsFAQsAPI referenceConduct a Vector Similarity Search\nThis topic describes how to search entities with Milvus.\nA vector similarity search in Milvus calculates the distance between query vector(s) and vectors in the collection with specified similarity metrics, and returns the most similar results. By specifying a boolean expression that filters the scalar field or the primary key field, you can perform a hybrid search or even a search with Time Travel.\nThe following example shows how to perform a vector similarity search on a 2000-row dataset of book ID (primary key), word count (scalar field), and book introduction (vector field), simulating the situation that you search for certain books based on their vectorized introductions. Milvus will return the most similar results according to the query vector and search parameters you have defined.\nLoad collection\nAll search and query operations within Milvus are executed in memory. Load the collection to memory before conducting a vector similarity search.\n\n  Python \n  Java\n  GO\n  Node.js\n\nfrom pymilvus import Collection\ncollection = Collection(\"book\")      # Get an existing collection.\ncollection.load()\n\nawait milvusClient.loadCollection({\n  collection_name: \"book\",\n});\n\nerr := milvusClient.LoadCollection(\n  context.Background(),   // ctx\n  \"book\",                 // CollectionName\n  false                   // async\n)\nif err != nil {\n  log.Fatal(\"failed to load collection:\", err.Error())\n}\n\nmilvusClient.loadCollection(\n  LoadCollectionParam.newBuilder()\n          .withCollectionName(\"book\")\n          .build()\n);\n\nload -c book\n\ncurl -X 'POST' \\\n  'http://localhost:9091/api/v1/collection/load' \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"collection_name\": \"book\"\n  }'\n\nPrepare search parameters\nPrepare the parameters that suit your search scenario. The following example defines that the search will calculate the distance with Euclidean distance, and retrieve vectors from ten closest clusters built by the IVF_FLAT index.\n\n  Python \n  Java\n  GO\n  Node.js\n  Curl\n\nsearch_params = {\n    \"metric_type\": \"L2\", \n    \"offset\": 5, \n    \"ignore_growing\": False, \n    \"params\": {\"nprobe\": 10}\n}\n\nconst searchParams = {\n    params: { nprobe: 1024 }\n};\n\nsp, _ := entity.NewIndexIvfFlatSearchParam( // NewIndex*SearchParam func\n    10,                                  // searchParam\n)\n\nopt := client.SearchQueryOptionFunc(func(option *client.SearchQueryOption) {\n    option.Limit = 3\n    option.Offset = 0\n    option.ConsistencyLevel = entity.ClStrong\n    option.IgnoreGrowing = false\n})\n\nfinal Integer SEARCH_K = 2;                       // TopK\nfinal String SEARCH_PARAM = \"{\\\"nprobe\\\":10, \\\"offset\\\":5}\";    // Params\n\n\nsearch\n\nCollection name (book): book\n\nThe vectors of search data(the length of data is number of query (nq), the dim of every vector in data must be equal to vector field\u2019s of collection. You can also import a csv file without headers): [[0.1, 0.2]]\n\nThe vector field used to search of collection (book_intro): book_intro\n\nMetric type: L2\n\nSearch parameter nprobe's value: 10\n\nThe max number of returned record, also known as topk: 10\n\nThe boolean expression used to filter attribute []: \n\nThe names of partitions to search (split by \",\" if multiple) ['_default'] []: \n\ntimeout []:\n\nGuarantee Timestamp(It instructs Milvus to see all operations performed before a provided timestamp. If no such timestamp is provided, then Milvus will search all operations performed to date) [0]: \n\nTravel Timestamp(Specify a timestamp in a search to get results based on a data view) [0]:\n\n\n# Search entities based on a given vector.\ncurl --request POST \\\n     --url '${MILVUS_HOST}:${MILVUS_PORT}/v1/vector/search' \\\n     --header 'Authorization: Bearer <TOKEN>' \\\n     --header 'accept: application/json' \\\n     --header 'content-type: application/json'\n     -d '{\n        \"collectionName\": \"collection1\",\n        \"vector\": [0.0128121, 0.029119, .... , 0.09121]\n      }'\n\n# Search entities and return specific fields.\ncurl --request POST \\\n     --url '${MILVUS_HOST}:${MILVUS_PORT}/v1/vector/search' \\\n     --header 'Authorization: Bearer <TOKEN>' \\\n     --header 'accept: application/json' \\\n     --header 'content-type: application/json'\n     -d '{\n       \"collectionName\": \"collection1\",\n       \"outputFields\": [\"id\", \"name\", \"feature\", \"distance\"],\n       \"vector\": [0.0128121, 0.029119, .... , 0.09121],\n       \"filter\": \"id in (1, 2, 3)\",\n       \"limit\": 100,\n       \"offset\": 0\n     }'\n\n\nOutput:\n{\n    \"code\": 200,\n    \"data\": {}\n}\n\n\n\n    \n    \n        Parameter\n        Description\n    \n    \n    \n    \n        metric_type\n        Method used to measure the distance between vectors during search. It should be the same as the one specified for the index-building process. See Simlarity Metrics for more information.\n    \n    \n        offset\n        Number of entities to skip during the search. The sum of this parameter and limit of the search method should be less than 16384.\n    \n    \n        ignore_growing\n        Whether to ignore growing segments during similarity searches. The value defaults to False, indicating that searches involve growing segments.\n        \n    \n        params\n        Search parameter(s) specific to the specified index type. See Vector Index for more information. Possible options are as follows: nprobe Indicates the number of cluster units to search. This parameter is available only when index_type is set to IVF_FLAT, IVF_SQ8, or IVF_PQ. The value should be less than nlist specified for the index-building process.\n            ef Indicates the search scope. This parameter is available only when index_type is set to HNSW. The value should be within the range from top_k to 32768.\n            search_k Indicates the search scope. This parameter is available only when index_type is set to ANNOY. The value should be greater than or equal to the top K. \n        \n    \n    \n\n\n    \n    \n        Parameter\n        Description\n    \n    \n    \n    \n        params\n        Search parameter(s) specific to the index. See Vector Index for more information. Possible options are as follows:\n            nprobe Indicates the number of cluster units to search. This parameter is available only when index_type is set to IVF_FLAT, IVF_SQ8, or IVF_PQ. The value should be less than nlist specified for the index-building process.\n            ef Indicates the search scope. This parameter is available only when index_type is set to HNSW. The value should be within the range from top_k to 32768.\n            search_k Indicates the search scope. This parameter is available only when index_type is set to ANNOY. The value should be greater than or equal to the top K. \n        \n    \n    \n\n\n    \n    \n        Parameter\n        Description\n    Options\n    \n    \n    \n    \n        NewIndex*SearchParam func\n        Function to create entity.SearchParam according to different index types.\n        For floating point vectors:\n            \n                NewIndexFlatSearchParam() (FLAT)\n                NewIndexIvfFlatSearchParam(nprobe int) (IVF_FLAT)\n                NewIndexIvfSQ8SearchParam(nprobe int) (IVF_SQ8)\n                NewIndexIvfPQSearchParam(nprobe int) (RNSG)\n                NewIndexHNSWSearchParam(ef int) (HNSW)\n                NewIndexANNOYSearchParam(search_k int) (ANNOY)\n            \n            For binary vectors:\n            \n                NewIndexBinFlatSearchParam(nprobe int) (BIN_FLAT)\n                NewIndexBinIvfFlatSearchParam(nprobe int) (BIN_IVF_FLAT)\n            \n        \n    \n    \n        sp\n        Search parameter(s) specific to the index returned by the preceding functions.\n        See Vector Index for more information. \n    \n    \n        opt\n        Options for ANN searches.\n        \n            Limit Indicates the number of entities to return.\n            Offset Indicates the number of entities to skip during the search. The sum of this parameter and Limit should be less than 16384.\n            ConsistencyLevel Indicates the consistency level applied during the search.\n            Ignore Growing Indicates whether to ignore growing segments during similarity searches. The value defaults to False, indicating that searches involve growing segments. \n        \n    \n    \n\n\n    \n    \n        Parameter\n        Description\n        Options\n    \n    \n    \n  \n        SEARCH_K\n        Number of the most similar results to return.\n    N/A\n    \n  \n        SEARCH_PARAM\n        Search parameter(s) specific to the index.\n    See Vector Index for more information. Possible options are as follows:\n        nprobe Indicates the number of cluster units to search. This parameter is available only when index_type is set to IVF_FLAT, IVF_SQ8, or IVF_PQ. The value should be less than nlist specified for the index-building process.\n        ef Indicates the search scope. This parameter is available only when index_type is set to HNSW. The value should be within the range from top_k to 32768.\n        search_k Indicates the search scope. This parameter is available only when index_type is set to ANNOY. The value should be greater than or equal to the top K.\n        metric_type Indicates the metric type used in the search. It should be the same as the one specified when you index the collection.\n        limit Indicates the number of entities to return starting from the last skippped entity.\n        offset Indicates the number of entities to skip during the search. The sum of this parameter and topK of the withTopK() method should be less than 16384.\n    \n    \n    \n\n\n    \n        \n            Option\n            Full name\n            Description\n        \n    \n    \n        \n            --help\n            n/a\n            Displays help for using the command.\n        \n    \n\n\n    \n    \n        Parameter\n        Description\n    \n    \n    \n    \n        collectionName\n        (Required) The name of the collection to which this operation applies.\n    \n    \n        filter\n        The filter used to find matches for the search\n    \n    \n        limit\n        The maximum number of entities to return.The sum of this value of that of `offset` should be less than **1024**.The value defaults to 100.The value ranges from 1 to 100\n    \n    \n        offset\n        The number of entities to skip in the search results.The sum of this value and that of `limit` should not be greater than 1024.The maximum value is 1024.\n    \n    \n        outputFields\n        An array of fields to return along with the search results.\n    \n    \n        vector\n        The query vector in the form of a list of floating numbers.\n    \n    \n\nConduct a vector search\nSearch vectors with Milvus. To search in a specific partition, specify the list of partition names.\nMilvus supports setting consistency level specifically for a search. The example in this topic sets the consistency level as Strong. You can also set the consistency level as Bounded, Session or Eventually. See Consistency for more information about the four consistency levels in Milvus.\n\n  Python \n  Java\n  GO\n  Node.js\n  Curl\n\nresults = collection.search(\n    data=[[0.1, 0.2]], \n    anns_field=\"book_intro\", \n    # the sum of `offset` in `param` and `limit` \n    # should be less than 16384.\n    param=search_params,\n    limit=10,\n    expr=None,\n    # set the names of the fields you want to \n    # retrieve from the search result.\n    output_fields=['title'],\n    consistency_level=\"Strong\"\n)\n\n# get the IDs of all returned hits\nresults[0].ids\n\n# get the distances to the query vector from all returned hits\nresults[0].distances\n\n# get the value of an output field specified in the search request.\nhit = results[0][0]\nhit.entity.get('title')\n\nconst results = await milvusClient.search({\n    collection_name: \"book\",\n    vector: [0.1, 0.2],\n    filter: null,\n    // the sum of `limit` and `offset` should be less than 16384.\n    limit: 10,\n    offset: 2,\n    metric_type: MetricType.L2,\n    param: searchParams,\n    consistency_level: ConsistencyLevelEnum.Strong,\n});\n\nsearchResult, err := milvusClient.Search(\n    context.Background(),                    // ctx\n    \"book\",                                  // CollectionName\n    []string{},                              // partitionNames\n    \"\",                                      // expr\n    []string{\"book_id\"},                     // outputFields\n    []entity.Vector{entity.FloatVector([]float32{0.1, 0.2})}, // vectors\n    \"book_intro\",                            // vectorField\n    entity.L2,                               // metricType\n    10,                                      // topK\n    sp,                                      // sp\n    opt,\n)\nif err != nil {\n    log.Fatal(\"fail to search collection:\", err.Error())\n}\n\nList<String> search_output_fields = Arrays.asList(\"book_id\");\nList<List<Float>> search_vectors = Arrays.asList(Arrays.asList(0.1f, 0.2f));\n\nSearchParam searchParam = SearchParam.newBuilder()\n        .withCollectionName(\"book\")\n        .withConsistencyLevel(ConsistencyLevelEnum.STRONG)\n        .withMetricType(MetricType.L2)\n        .withOutFields(search_output_fields)\n        .withTopK(SEARCH_K)\n        .withVectors(search_vectors)\n        .withVectorFieldName(\"book_intro\")\n        .withParams(SEARCH_PARAM)\n        .build();\nR<SearchResults> respSearch = milvusClient.search(searchParam);\n\n# Follow the previous step.\n\n# Follow the previous step.\n\n\n    \n    \n        Parameter\n        Description\n    \n    \n    \n    \n        data\n        Vectors to search with.\n    \n    \n        anns_field\n        Name of the field to search on.\n    \n    \n        param\n        Search parameter(s) specific to the index. See Vector Index for more information.\n    \n    \n        limit\n        Number of the most similar results to return.  The sum of this value and offset in param should be less than 16384.\n    \n  \n        expr\n        Boolean expression used to filter attribute. See Boolean Expression Rules for more information.\n    \n  \n        output_fields (optional)\n        Name of the field to return. Vector field is not supported in current release.\n    \n    \n        consistency_level (optional)\n        Consistency level of the search.\n    \n    \n\n\n    \n    \n        Parameter\n        Description\n    \n    \n    \n    \n        collection_name\n        Name of the collection to search in.\n    \n    \n    search_params\n    Parameters (as an object) used for search.\n  \n    \n    vector / vectors\n    Vectors to search with. Note that you should provide a list of floats if you choose to use vector. Otherwise, you should provide a list of float lists.\n  \n  \n        vector_type\n        Pre-check of binary or float vectors. 100 for binary vectors and 101 for float vectors.\n    \n    \n        limit (optional)\n        Number of the most similar results to return. The sum of this value and offset should be less than 16384.\n    \n    \n        offset (optional)\n        Number of entities to skip. The sum of this value of limit should be less than 16384.\n    \n    \n        filter (optional)\n        Boolean expression used to filter attribute. See Boolean Expression Rules for more information.\n    \n  \n        output_fields (optional)\n        Name of the field to return. Vector field is not supported in current release.\n    \n    \n\n\n    \n    \n        Parameter\n        Description\n    Options\n    \n    \n    \n  \n    ctx\n    Context to control API invocation process.\n    N/A\n  \n  \n    CollectionName\n    Name of the collection to load.\n    N/A\n  \n  \n    partitionNames\n    List of names of the partitions to load. All partitions will be searched if it is left empty.\n    N/A\n  \n  \n        expr\n        Boolean expression used to filter attribute.\n    See Boolean Expression Rules for more information.\n    \n  \n        output_fields\n        Name of the field to return.\n    Vector field is not supported in current release.\n    \n  \n    vectors\n    Vectors to search with.\n    N/A\n  \n  \n        vectorField\n        Name of the field to search on.\n    N/A\n    \n  \n        metricType\n        Metric type used for search.\n    This parameter must be set identical to the metric type used for index building.\n    \n  \n        topK\n        Number of the most similar results to return. The sum of this value and that of offset in WithOffset of opts should be less than 16384.\n    N/A\n    \n  \n        sp\n        entity.SearchParam specific to the index.\n    N/A\n    \n    \n\n\n    \n    \n        Parameter\n        Description\n    Options\n    \n    \n    \n    \n    CollectionName\n    Name of the collection to load.\n    N/A\n  \n  \n        MetricType\n        Metric type used for search.\n    This parameter must be set identical to the metric type used for index building.\n    \n  \n        OutFields\n        Name of the field to return.\n    Vector field is not supported in current release.\n    \n  \n    Vectors\n    Vectors to search with.\n    N/A\n  \n\n        VectorFieldName\n        Name of the field to search on.\n    N/A\n    \n  \n        Expr\n        Boolean expression used to filter attribute.\n    See Boolean Expression Rules for more information.\n    \n  \n        ConsistencyLevel\n        The consistency level used in the query.\n      STRONG, BOUNDED, andEVENTUALLY.\n    \n    \n\nCheck the primary key values of the most similar vectors and their distances.\n\n  Python \n  Java\n  GO\n  Node.js\n\nresults[0].ids\nresults[0].distances\n\nconsole.log(results.results)\n\nfmt.Printf(\"%#v\\n\", searchResult)\nfor _, sr := range searchResult {\n    fmt.Println(sr.IDs)\n    fmt.Println(sr.Scores)\n}\n\nSearchResultsWrapper wrapperSearch = new SearchResultsWrapper(respSearch.getData().getResults());\nSystem.out.println(wrapperSearch.getIDScore(0));\nSystem.out.println(wrapperSearch.getFieldData(\"book_id\", 0));\n\n# Milvus CLI automatically returns the primary key values of the most similar vectors and their distances.\n\nRelease the collection loaded in Milvus to reduce memory consumption when the search is completed.\n\n  Python \n  Java\n  GO\n  Node.js\n\ncollection.release()\n\nawait milvusClient.releaseCollection({  collection_name: \"book\",});\n\nerr := milvusClient.ReleaseCollection(\n    context.Background(),                            // ctx\n    \"book\",                                          // CollectionName\n)\nif err != nil {\n    log.Fatal(\"failed to release collection:\", err.Error())\n}\n\nmilvusClient.releaseCollection(\n        ReleaseCollectionParam.newBuilder()\n                .withCollectionName(\"book\")\n                .build());\n\nrelease -c book\n\ncurl -X 'DELETE' \\\n  'http://localhost:9091/api/v1/collection/load' \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"collection_name\": \"book\"\n  }'\n\nLimits\n\n\n\nFeature\nMaximum limit\n\n\n\n\nLength of a collection name\n255 characters\n\n\nNumber of partitions in a collection\n4,096\n\n\nNumber of fields in a collection\n256\n\n\nNumber of shards in a collection\n256\n\n\nDimensions of a vector\n32,768\n\n\nTop K\n16,384\n\n\nTarget input vectors\n16,384\n\n\n\nWhat's next\n\n\nLearn more basic operations of Milvus:\n\nQuery vectors\nConduct a hybrid search\nSearch with Time Travel\n\n\n\nExplore API references for Milvus SDKs:\n\nPyMilvus API reference\nNode.js API reference\nGo API reference\nJava API reference\n\n\nsearch.md was last updated at 2023-07-25 23:45:34: Merge pull request #2238 from younver/patch-1Edit this pageReport a bugRequest doc changesOn this pageConduct a Vector Similarity SearchLoad collectionPrepare search parametersConduct a vector searchLimitsWhat's nextResourcesDocsBlogManaged serviceTutorialsBootcampDemoVideoToolsAttuMilvus CLISizing ToolMivlus backup ToolCommunityGet involvedSlackGithubForumMilvus. 2023 All rights reserved./*<![CDATA[*/window.pagePath=\"/docs/search.md\";/*]]>*//*<![CDATA[*/window.___chunkMapping={\"polyfill\":[\"/polyfill.js\"],\"app\":[\"/app.js\"],\"component---src-pages-404-js\":[\"/component---src-pages-404-js.js\",\"/component---src-pages-404-js.ffef32ceb6972d1b6709.css\"],\"component---src-pages-bootcamp-jsx\":[\"/component---src-pages-bootcamp-jsx.js\",\"/component---src-pages-bootcamp-jsx.edf1a55d3c49094e9b41.css\"],\"component---src-pages-community-index-jsx\":[\"/component---src-pages-community-index-jsx.js\",\"/component---src-pages-community-index-jsx.c505d2a5fff7c1e4b2c8.css\"],\"component---src-pages-index-jsx\":[\"/component---src-pages-index-jsx.js\",\"/component---src-pages-index-jsx.45df0d4bdfe2db469d6c.css\"],\"component---src-pages-milvus-demos-index-jsx\":[\"/component---src-pages-milvus-demos-index-jsx.js\",\"/component---src-pages-milvus-demos-index-jsx.1a3d1c4caf417de255ae.css\"],\"component---src-pages-milvus-demos-reverse-image-search-jsx\":[\"/component---src-pages-milvus-demos-reverse-image-search-jsx.js\",\"/component---src-pages-milvus-demos-reverse-image-search-jsx.c41e4c5ead83649937e8.css\"],\"component---src-pages-slack-jsx\":[\"/component---src-pages-slack-jsx.js\",\"/component---src-pages-slack-jsx.b3b356986d01fe89f9d1.css\"],\"component---src-pages-tools-sizing-jsx\":[\"/component---src-pages-tools-sizing-jsx.js\",\"/component---src-pages-tools-sizing-jsx.66d1c05015f9508df90b.css\"],\"component---src-templates-api-doc-template-jsx\":[\"/component---src-templates-api-doc-template-jsx.js\",\"/component---src-templates-api-doc-template-jsx.6c57c73b99682695a5ef.css\"],\"component---src-templates-blog-list-template-jsx\":[\"/component---src-templates-blog-list-template-jsx.js\",\"/component---src-templates-blog-list-template-jsx.71f592374d478c258caf.css\"],\"component---src-templates-blog-template-jsx\":[\"/component---src-templates-blog-template-jsx.js\",\"/component---src-templates-blog-template-jsx.5068317f62135173b013.css\"],\"component---src-templates-doc-template-jsx\":[\"/component---src-templates-doc-template-jsx.js\",\"/component---src-templates-doc-template-jsx.0e85fbce360982ff881c.css\"]};/*]]>*/", "content_type": "text", "score": null, "meta": {"url": "https://milvus.io/docs/search.md"}, "id_hash_keys": ["content"], "embedding": null, "id": "7b3296ed21824b9d52879d1a0ddd0fa3"}