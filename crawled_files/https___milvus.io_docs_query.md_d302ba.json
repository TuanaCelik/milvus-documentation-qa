{"content": "<iframe src=\"https://www.googletagmanager.com/ns.html?id=G-V1G3KQ048M\" height=\"0\" width=\"0\" style=\"display: none; visibility: hidden\" aria-hidden=\"true\"></iframe>DocsTutorialsToolsBlogCommunityTry Managed Milvus FREEDocsTutorialsToolsBlogCommunityStars22kJoin SlackTry Managed Milvus FREEHow we use cookiesThis website stores cookies on your computer. By continuing to browse or by clicking \u2018Accept\u2019, you agree to the storing of cookies on your device to enhance your site experience and for analytical purposes.AcceptSearch\u2318KHomev2.2.x\u200bAbout MilvusGet StartedUser GuideManage Milvus ConnectionsManage DatabasesManage CollectionsManage PartitionsManage DataManage IndexesSearch and QuerySearchHybrid SearchQuerySearch with Time TravelBootcampAdministration GuideIntegrationsBenchmarksToolsReferenceExample ApplicationsFAQsAPI referenceConduct a Vector Query\nThis topic describes how to conduct a vector query.\nUnlike a vector similarity search, a vector query retrieves vectors via scalar filtering based on boolean expression. Milvus supports many data types in the scalar fields and a variety of boolean expressions. The boolean expression filters on scalar fields or the primary key field, and it retrieves all results that match the filters.\nThe following example shows how to perform a vector query on a 2000-row dataset of book ID (primary key), word count (scalar field), and book introduction (vector field), simulating the situation where you query for certain books based on their IDs.\nLoad collection\nAll search and query operations within Milvus are executed in memory. Load the collection to memory before conducting a vector query.\n\n  Python \n  Java\n  GO\n  Node.js\n\nfrom pymilvus import Collection\ncollection = Collection(\"book\")      # Get an existing collection.\ncollection.load()\n\nawait milvusClient.loadCollection({\n  collection_name: \"book\",\n});\n\nerr := milvusClient.LoadCollection(\n  context.Background(),   // ctx\n  \"book\",                 // CollectionName\n  false                   // async\n)\nif err != nil {\n  log.Fatal(\"failed to load collection:\", err.Error())\n}\n\nmilvusClient.loadCollection(\n  LoadCollectionParam.newBuilder()\n    .withCollectionName(\"book\")\n    .build()\n);\n\n\nload -c book\n\n# See the following step.\n\n\nConduct a vector query\nThe following example filters the vectors with certain book_id values, and returns the book_id field and book_intro of the results.\nMilvus supports setting consistency level specifically for a query. The example in this topic sets the consistency level as Strong. You can also set the consistency level as Bounded, Session or Eventually. See Consistency for more information about the four consistency levels in Milvus.\nYou can also use dynamic fields in the filter expression and output fields in the query requests. For example, refer to Dynamic Schema.\n\n  Python \n  Java\n  GO\n  Node.js\n  Curl\n\nres = collection.query(\n  expr = \"book_id in [2,4,6,8]\",\n  offset = 0,\n  limit = 10, \n  output_fields = [\"book_id\", \"book_intro\"],\n)\n\nconst results = await milvusClient.query({\n  collection_name: \"book\",\n  expr: \"book_id in [2,4,6,8]\",\n  output_fields: [\"book_id\", \"book_intro\"],\n  limit: 10,\n  offset: 0,\n});\n\nopt := client.SearchQueryOptionFunc(func(option *client.SearchQueryOption) {\n    option.Limit = 3\n    option.Offset = 0\n    option.ConsistencyLevel = entity.ClStrong\n    option.IgnoreGrowing = false\n})\n\nqueryResult, err := milvusClient.Query(\n    context.Background(),                                   // ctx\n    \"book\",                                                 // CollectionName\n    \"\",                                                     // PartitionName\n    entity.NewColumnInt64(\"book_id\", []int64{2,4,6,8}),     // expr\n    []string{\"book_id\", \"book_intro\"},                      // OutputFields\n    opt,                                                    // queryOptions\n)\nif err != nil {\n    log.Fatal(\"fail to query collection:\", err.Error())\n}\n\nList<String> query_output_fields = Arrays.asList(\"book_id\", \"word_count\");\nQueryParam queryParam = QueryParam.newBuilder()\n  .withCollectionName(\"book\")\n  .withConsistencyLevel(ConsistencyLevelEnum.STRONG)\n  .withExpr(\"book_id in [2,4,6,8]\")\n  .withOutFields(query_output_fields)\n  .withOffset(0L)\n  .withLimit(10L)\n  .build();\nR<QueryResults> respQuery = milvusClient.query(queryParam);\n\n\nquery\n\ncollection_name: book\n\nThe query expression: book_id in [2,4,6,8]\n\nName of partitions that contain entities(split by \",\" if multiple) []:\n\nA list of fields to return(split by \",\" if multiple) []: book_id, book_intro\n\ntimeout []:\n\n\ncurl --request POST \\\n     --url '${MILVUS_HOST}:${MILVUS_PORT}/v1/vector/query' \\\n     --header 'Authorization: Bearer <TOKEN>' \\\n     --header 'accept: application/json' \\\n     --header 'content-type: application/json'\n     -d '{\n       \"collectionName\": \"collection1\",\n       \"outputFields\": [\"id\", \"name\", \"feature\", \"distance\"],\n       \"filter\": \"id in (1, 2, 3)\",\n       \"limit\": 100,\n       \"offset\": 0\n     }'\n\n\nOutput:\n{\n    \"code\": 200,\n    \"data\": {}\n}\n\n\n\n    \n    \n        Parameter\n        Description\n    \n    \n    \n    \n        expr\n        Boolean expression used to filter attribute. Find more expression details in Boolean Expression Rules.\n    \n    \n        limit\n        Number of the most similar results to return. The sum of this value and offset should be less than 16384.\n    \n    \n        offset\n        Number of results to skip in the returned set. This parameter is available only when limit is specified, and the sum of this value and limit should be less than 16384.\n    \n    \n        output_fields (optional)\n        List of names of the field to return.\n    \n    \n        partition_names (optional)\n        List of names of the partitions to query on.\n    \n    \n        consistency_level (optional)\n        Consistency level of the query.\n    \n    \n\n\n    \n    \n        Parameter\n        Description\n    \n    \n    \n    \n        collection_name\n        Name of the collection to query.\n    \n    \n        expr\n        Boolean expression used to filter attribute. Find more expression details in Boolean Expression Rules.\n    \n    \n        output_fields (optional)\n        List of names of the field to return.\n    \n    \n        limit (optional)\n        Number of the most similar results to return. The sum of this value and offset should be less than 16384.\n    \n    \n        offset (optional)\n        Number of results to skip in the returned set. This parameter is available only when limit is specified, and the sum of this value and limit should be less than 16384.\n    \n    \n\n\n    \n    \n        Parameter\n        Description\n    Options\n    \n    \n    \n  \n    ctx\n    Context to control API invocation process.\n    N/A\n  \n  \n    CollectionName\n    Name of the collection to query.\n    N/A\n  \n  \n    partitionName\n    List of names of the partitions to load. All partitions will be queried if it is left empty.\n    N/A\n  \n  \n        expr\n        Boolean expression used to filter attribute.\n    See Boolean Expression Rules for more information.\n    \n    \n        OutputFields\n        Name of the field to return.\n        Vector field is not supported in current release.\n    \n    \n        opts\n        Query options in the form of entity.SearchQueryOptionFunc.\n        \n            Limit Indicates the number of entities to return.\n            Offset Indicates the number of entities to skip during the search. The sum of this parameter and Limit should be less than 16384.\n            ConsistencyLevel Indicates the consistency level applied during the search.\n            Ignore Growing Indicates whether to ignore growing segments during similarity searches. The value defaults to False, indicating that searches involve growing segments. \n        \n    \n    \n\n\n    \n    \n        Parameter\n        Description\n    Options\n    \n    \n    \n    \n    CollectionName\n    Name of the collection to load.\n    N/A\n  \n  \n        OutFields\n        Name of the field to return.\n    Vector field is not supported in current release.\n    \n  \n        Expr\n        Boolean expression used to filter attribute.\n    See Boolean Expression Rules for more information.\n    \n    \n        Limit (optional)\n        Number of the most similar results to return. The sum of this value and offset in WithOffset() should be less than 16384.\n    \n    \n        Offset (optional)\n        Number of results to skip in the returned set. This parameter is available only when limit is specified, and the sum of this value and limit in WithLimit() should be less than 16384.\n    \n  \n        ConsistencyLevel\n        The consistency level used in the query.\n      STRONG, BOUNDED, andEVENTUALLY.\n    \n    \n\n\n    \n        \n            Option\n            Full name\n            Description\n        \n    \n    \n        \n            --help\n            n/a\n            Displays help for using the command.\n        \n    \n\n\n    \n    \n        Parameter\n        Description\n    \n    \n    \n    \n        collectionName\n        (Required) The name of the collection to which this operation applies.\n    \n    \n        filter\n        The filter used to find matches for the search\n    \n    \n        limit\n        The maximum number of entities to return.The sum of this value of that of `offset` should be less than **1024**.The value defaults to 100.The value ranges from 1 to 100\n    \n    \n        offset\n        The number of entities to skip in the search results.The sum of this value and that of `limit` should not be greater than 1024.The maximum value is 1024.\n    \n    \n        outputFields\n        An array of fields to return along with the search results.\n    \n    \n\nCheck the returned results.\n\n  Python \n  Java\n  GO\n  Node.js\n  Curl\n\nsorted_res = sorted(res, key=lambda k: k['book_id'])\nsorted_res\n\nconsole.log(results.data)\n\nfmt.Printf(\"%#v\\n\", queryResult)\nfor _, qr := range queryResult {\n    fmt.Println(qr.IDs)\n}\n\nQueryResultsWrapper wrapperQuery = new QueryResultsWrapper(respQuery.getData());\nSystem.out.println(wrapperQuery.getFieldWrapper(\"book_id\").getFieldData());\nSystem.out.println(wrapperQuery.getFieldWrapper(\"word_count\").getFieldData());\n\n\n```shell\n# Milvus CLI automatically returns the entities with the pre-defined output fields.\n```\n# See the output of the previous step.\n\n\nWhat's next\n\n\nLearn more basic operations of Milvus:\n\nConduct a vector search\nConduct a hybrid search\nSearch with Time Travel\n\n\n\nExplore API references for Milvus SDKs:\n\nPyMilvus API reference\nNode.js API reference\nGo API reference\nJava API reference\n\n\nquery.md was last updated at 2023-07-24 18:37:26: update user guidesEdit this pageReport a bugRequest doc changesOn this pageConduct a Vector QueryLoad collectionConduct a vector queryWhat's nextResourcesDocsBlogManaged serviceTutorialsBootcampDemoVideoToolsAttuMilvus CLISizing ToolMivlus backup ToolCommunityGet involvedSlackGithubForumMilvus. 2023 All rights reserved./*<![CDATA[*/window.pagePath=\"/docs/query.md\";/*]]>*//*<![CDATA[*/window.___chunkMapping={\"polyfill\":[\"/polyfill.js\"],\"app\":[\"/app.js\"],\"component---src-pages-404-js\":[\"/component---src-pages-404-js.js\",\"/component---src-pages-404-js.ffef32ceb6972d1b6709.css\"],\"component---src-pages-bootcamp-jsx\":[\"/component---src-pages-bootcamp-jsx.js\",\"/component---src-pages-bootcamp-jsx.edf1a55d3c49094e9b41.css\"],\"component---src-pages-community-index-jsx\":[\"/component---src-pages-community-index-jsx.js\",\"/component---src-pages-community-index-jsx.c505d2a5fff7c1e4b2c8.css\"],\"component---src-pages-index-jsx\":[\"/component---src-pages-index-jsx.js\",\"/component---src-pages-index-jsx.45df0d4bdfe2db469d6c.css\"],\"component---src-pages-milvus-demos-index-jsx\":[\"/component---src-pages-milvus-demos-index-jsx.js\",\"/component---src-pages-milvus-demos-index-jsx.1a3d1c4caf417de255ae.css\"],\"component---src-pages-milvus-demos-reverse-image-search-jsx\":[\"/component---src-pages-milvus-demos-reverse-image-search-jsx.js\",\"/component---src-pages-milvus-demos-reverse-image-search-jsx.c41e4c5ead83649937e8.css\"],\"component---src-pages-slack-jsx\":[\"/component---src-pages-slack-jsx.js\",\"/component---src-pages-slack-jsx.b3b356986d01fe89f9d1.css\"],\"component---src-pages-tools-sizing-jsx\":[\"/component---src-pages-tools-sizing-jsx.js\",\"/component---src-pages-tools-sizing-jsx.66d1c05015f9508df90b.css\"],\"component---src-templates-api-doc-template-jsx\":[\"/component---src-templates-api-doc-template-jsx.js\",\"/component---src-templates-api-doc-template-jsx.6c57c73b99682695a5ef.css\"],\"component---src-templates-blog-list-template-jsx\":[\"/component---src-templates-blog-list-template-jsx.js\",\"/component---src-templates-blog-list-template-jsx.71f592374d478c258caf.css\"],\"component---src-templates-blog-template-jsx\":[\"/component---src-templates-blog-template-jsx.js\",\"/component---src-templates-blog-template-jsx.5068317f62135173b013.css\"],\"component---src-templates-doc-template-jsx\":[\"/component---src-templates-doc-template-jsx.js\",\"/component---src-templates-doc-template-jsx.0e85fbce360982ff881c.css\"]};/*]]>*/", "content_type": "text", "score": null, "meta": {"url": "https://milvus.io/docs/query.md"}, "id_hash_keys": ["content"], "embedding": null, "id": "eb9d86065e0d45d1807c79b555f9442"}