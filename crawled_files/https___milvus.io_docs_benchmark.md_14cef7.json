{"content": "<iframe src=\"https://www.googletagmanager.com/ns.html?id=G-V1G3KQ048M\" height=\"0\" width=\"0\" style=\"display: none; visibility: hidden\" aria-hidden=\"true\"></iframe>DocsTutorialsToolsBlogCommunityTry Managed Milvus FREEDocsTutorialsToolsBlogCommunityStars22kJoin SlackTry Managed Milvus FREEHow we use cookiesThis website stores cookies on your computer. By continuing to browse or by clicking \u2018Accept\u2019, you agree to the storing of cookies on your device to enhance your site experience and for analytical purposes.AcceptSearch\u2318KHomev2.2.x\u200bAbout MilvusGet StartedUser GuideAdministration GuideIntegrationsBenchmarksToolsReferenceExample ApplicationsFAQsAPI referenceMilvus 2.2 Benchmark Test Report\nThis report shows the major test results of Milvus 2.2.0. It aims to provide a picture of Milvus 2.2.0 search performance, especially in the capability to scale up and scale out.\n\n  \n      \n      \n  \n  \n    We have recently run a benchmark against Milvus 2.2.3 and have the following key findings:\n    \n      A 2.5x reduction in search latency\n      A 4.5x increase in QPS\n      Billion-scale similarity search with little performance degradation\n      Linear scalability when using multiple replicas\n    \n    For details, welcome referring to this whitepaper and related benchmark test code. \n  \n\nSummary\n\nComparing with Milvus 2.1, the QPS of Milvus 2.2.0 increases over 48% in cluster mode and over 75% in standalone mode.\nMilvus 2.2.0 has an impressive capability to scale up and scale out:\n\nQPS increases linearly when expanding CPU cores from 8 to 32.\nQPS increases linearly when expanding Querynode replicas from 1 to 8.\n\n\n\nTerminology\n\n    Click to see the details of the terms used in the test\n    \n        \n            \n                Term\n                Description\n            \n        \n        \n            \n                nq\n                Number of vectors to be searched in one search request\n            \n            \n                topk\n                Number of the nearest vectors to be retrieved for each vector (in nq) in a search request\n            \n            \n                ef\n                A search parameter specific to HNSW index\n            \n            \n                RT\n                Response time from sending the request to receiving the response\n            \n            \n                QPS\n                Number of search requests that are successfully processed per second\n            \n        \n    \n\nTest environment\nAll tests are performed under the following environments.\nHardware environment\n\n\n\nHardware\nSpecification\n\n\n\n\nCPU\nIntel(R) Xeon(R) Gold 6226R CPU @ 2.90GHz\n\n\nMemory\n16*\\32 GB RDIMM, 3200 MT/s\n\n\nSSD\nSATA 6 Gbps\n\n\n\nSoftware environment\n\n\n\nSoftware\nVersion\n\n\n\n\nMilvus\nv2.2.0\n\n\nMilvus GO SDK\nv2.2.0\n\n\n\nDeployment scheme\n\nMilvus instances (standalone or cluster) are deployed via Helm on a Kubernetes cluster based on physical or virtual machines.\nDifferent tests merely vary in the number of CPU cores, the size of memory, and the number of replicas (worker nodes), which only applies to Milvus clusters.\nUnspecified configurations are identical to default configurations.\nMilvus dependencies (MinIO, Pulsar and Etcd) store data on the local SSD in each node.\nSearch requests are sent to the Milvus instances via Milvus GO SDK.\n\nData sets\nThe test uses the open-source dataset SIFT (128 dimensions) from ANN-Benchmarks.\nTest pipeline\n\nStart a Milvus instance by Helm with respective server configurations as listed in each test.\nConnect to the Milvus instance via Milvus GO SDK and get the corresponding test results.\nCreate a collection.\nInsert 1 million SIFT vectors. Build an HNSW index and configure the index parameters by setting M to 8 and efConstruction to 200.\nLoad the collection.\nSearch with different concurrent numbers with search parameters nq=1, topk=1, ef=64, the duration of each concurrency is at least 1 hour.\n\nTest results\nMilvus 2.2.0 v.s. Milvus 2.1.0\nCluster\n\n    Server configurations (cluster)\nqueryNode:\n  replicas: 1\n  resources:\n    limits:\n      cpu: \"12.0\"\n      memory: 8Gi\n    requests:\n      cpu: \"12.0\"\n      memory: 8Gi\n\n\nSearch performance\n\n\n\nMilvus\nQPS\nRT(TP99) / ms\nRT(TP50) / ms\nfail/s\n\n\n\n\n2.1.0\n6904\n59\n28\n0\n\n\n2.2.0\n10248\n63\n24\n0\n\n\n\n\n      \n  \n    \nStandalone\n\n    Server configurations (standalone)\nstandalone:\n  replicas: 1\n  resources:\n    limits:\n      cpu: \"12.0\"\n      memory: 16Gi\n    requests:\n      cpu: \"12.0\"\n      memory: 16Gi\n\n\nSearch performance\n\n\n\nMilvus\nQPS\nRT(TP99) / ms\nRT(TP50) / ms\nfail/s\n\n\n\n\n2.1.0\n4287\n104\n76\n0\n\n\n2.2.0\n7522\n127\n79\n0\n\n\n\n\n      \n  \n    \nMilvus 2.2.0 Scale-up\nExpand the CPU cores in one Querynode to check the capability to scale up.\n\n    Server configurations (cluster)\nqueryNode:\n replicas: 1\n resources:\n   limits:\n     cpu: \"8.0\" /\"12.0\" /\"16.0\" /\"32.0\"\n     memory: 8Gi\n   requests:\n     cpu: \"8.0\" /\"12.0\" /\"16.0\" /\"32.0\"\n     memory: 8Gi\n\n\nSearch Performance\n\n\n\nCPU cores\nConcurrent Number\nQPS\nRT(TP99) / ms\nRT(TP50) / ms\nfail/s\n\n\n\n\n8\n500\n7153\n127\n83\n0\n\n\n12\n300\n10248\n63\n24\n0\n\n\n16\n600\n14135\n85\n42\n0\n\n\n32\n600\n20281\n63\n28\n0\n\n\n\n\n      \n  \n    \nMilvus 2.2.0 Scale-out\nExpand more replicas with more Querynodes to check the capability to scale out.\n\nNote: the number of Querynodes equals the replica_number when loading the collection.\n\n\n    Server configurations (cluster)\nqueryNode:\n  replicas: 1 / 2 / 4 / 8      \n  resources:\n    limits:\n      cpu: \"8.0\"\n      memory: 8Gi\n    requests:\n      cpu: \"8.0\"\n      memory: 8Gi\n\n\n\n\n\nReplicas\nConcurrent Number\nQPS\nRT(TP99) / ms\nRT(TP50) / ms\nfail/s\n\n\n\n\n1\n500\n7153\n127\n83\n0\n\n\n2\n500\n15903\n105\n27\n0\n\n\n4\n800\n19281\n109\n40\n0\n\n\n8\n1200\n30655\n93\n38\n0\n\n\n\n\n      \n  \n    \nWhat's next\n\nTry performing Milvus 2.2.0 benchmark tests on your own by referring to this guide, except that you should instead use Milvus 2.2 and Pymilvus 2.2 in this guide.\nbenchmark.md was last updated at 2023-07-18 23:23:10: Update benchmark.mdEdit this pageReport a bugRequest doc changesOn this pageMilvus 2.2 Benchmark Test ReportSummaryTerminologyTest environmentTest pipelineTest resultsWhat's nextResourcesDocsBlogManaged serviceTutorialsBootcampDemoVideoToolsAttuMilvus CLISizing ToolMivlus backup ToolCommunityGet involvedSlackGithubForumMilvus. 2023 All rights reserved./*<![CDATA[*/window.pagePath=\"/docs/benchmark.md\";/*]]>*//*<![CDATA[*/window.___chunkMapping={\"polyfill\":[\"/polyfill.js\"],\"app\":[\"/app.js\"],\"component---src-pages-404-js\":[\"/component---src-pages-404-js.js\",\"/component---src-pages-404-js.ffef32ceb6972d1b6709.css\"],\"component---src-pages-bootcamp-jsx\":[\"/component---src-pages-bootcamp-jsx.js\",\"/component---src-pages-bootcamp-jsx.edf1a55d3c49094e9b41.css\"],\"component---src-pages-community-index-jsx\":[\"/component---src-pages-community-index-jsx.js\",\"/component---src-pages-community-index-jsx.c505d2a5fff7c1e4b2c8.css\"],\"component---src-pages-index-jsx\":[\"/component---src-pages-index-jsx.js\",\"/component---src-pages-index-jsx.45df0d4bdfe2db469d6c.css\"],\"component---src-pages-milvus-demos-index-jsx\":[\"/component---src-pages-milvus-demos-index-jsx.js\",\"/component---src-pages-milvus-demos-index-jsx.1a3d1c4caf417de255ae.css\"],\"component---src-pages-milvus-demos-reverse-image-search-jsx\":[\"/component---src-pages-milvus-demos-reverse-image-search-jsx.js\",\"/component---src-pages-milvus-demos-reverse-image-search-jsx.c41e4c5ead83649937e8.css\"],\"component---src-pages-slack-jsx\":[\"/component---src-pages-slack-jsx.js\",\"/component---src-pages-slack-jsx.b3b356986d01fe89f9d1.css\"],\"component---src-pages-tools-sizing-jsx\":[\"/component---src-pages-tools-sizing-jsx.js\",\"/component---src-pages-tools-sizing-jsx.66d1c05015f9508df90b.css\"],\"component---src-templates-api-doc-template-jsx\":[\"/component---src-templates-api-doc-template-jsx.js\",\"/component---src-templates-api-doc-template-jsx.6c57c73b99682695a5ef.css\"],\"component---src-templates-blog-list-template-jsx\":[\"/component---src-templates-blog-list-template-jsx.js\",\"/component---src-templates-blog-list-template-jsx.71f592374d478c258caf.css\"],\"component---src-templates-blog-template-jsx\":[\"/component---src-templates-blog-template-jsx.js\",\"/component---src-templates-blog-template-jsx.5068317f62135173b013.css\"],\"component---src-templates-doc-template-jsx\":[\"/component---src-templates-doc-template-jsx.js\",\"/component---src-templates-doc-template-jsx.0e85fbce360982ff881c.css\"]};/*]]>*/", "content_type": "text", "score": null, "meta": {"url": "https://milvus.io/docs/benchmark.md"}, "id_hash_keys": ["content"], "embedding": null, "id": "d25cf96400a2bf6b121c5370a7870786"}